
Real_time_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c2c  08004c2c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c2c  08004c2c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c2c  08004c2c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000008c  08004cc0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004cc0  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7e9  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002019  00000000  00000000  0002d89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0002f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00030718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018376  00000000  00000000  00031498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f93b  00000000  00000000  0004980e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3cc  00000000  00000000  00059149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc0  00000000  00000000  000e4568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b4c 	.word	0x08004b4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08004b4c 	.word	0x08004b4c

0800014c <DS1307_Init>:

/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <DS1307_Init+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 800015a:	2000      	movs	r0, #0
 800015c:	f000 f806 	bl	800016c <DS1307_SetClockHalt>
}
 8000160:	bf00      	nop
 8000162:	3708      	adds	r7, #8
 8000164:	46bd      	mov	sp, r7
 8000166:	bd80      	pop	{r7, pc}
 8000168:	200000a8 	.word	0x200000a8

0800016c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 800016c:	b580      	push	{r7, lr}
 800016e:	b084      	sub	sp, #16
 8000170:	af00      	add	r7, sp, #0
 8000172:	4603      	mov	r3, r0
 8000174:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <DS1307_SetClockHalt+0x14>
 800017c:	2380      	movs	r3, #128	; 0x80
 800017e:	e000      	b.n	8000182 <DS1307_SetClockHalt+0x16>
 8000180:	2300      	movs	r3, #0
 8000182:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8000184:	2000      	movs	r0, #0
 8000186:	f000 f83d 	bl	8000204 <DS1307_GetRegByte>
 800018a:	4603      	mov	r3, r0
 800018c:	b25b      	sxtb	r3, r3
 800018e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000192:	b25a      	sxtb	r2, r3
 8000194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000198:	4313      	orrs	r3, r2
 800019a:	b25b      	sxtb	r3, r3
 800019c:	b2db      	uxtb	r3, r3
 800019e:	4619      	mov	r1, r3
 80001a0:	2000      	movs	r0, #0
 80001a2:	f000 f811 	bl	80001c8 <DS1307_SetRegByte>
}
 80001a6:	bf00      	nop
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}

080001ae <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 80001ae:	b580      	push	{r7, lr}
 80001b0:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 80001b2:	2000      	movs	r0, #0
 80001b4:	f000 f826 	bl	8000204 <DS1307_GetRegByte>
 80001b8:	4603      	mov	r3, r0
 80001ba:	11db      	asrs	r3, r3, #7
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	f003 0301 	and.w	r3, r3, #1
 80001c2:	b2db      	uxtb	r3, r3
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	bd80      	pop	{r7, pc}

080001c8 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	733b      	strb	r3, [r7, #12]
 80001dc:	79bb      	ldrb	r3, [r7, #6]
 80001de:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80001e0:	4b07      	ldr	r3, [pc, #28]	; (8000200 <DS1307_SetRegByte+0x38>)
 80001e2:	6818      	ldr	r0, [r3, #0]
 80001e4:	f107 020c 	add.w	r2, r7, #12
 80001e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2302      	movs	r3, #2
 80001f0:	21d0      	movs	r1, #208	; 0xd0
 80001f2:	f002 f8e7 	bl	80023c4 <HAL_I2C_Master_Transmit>
}
 80001f6:	bf00      	nop
 80001f8:	3710      	adds	r7, #16
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	200000a8 	.word	0x200000a8

08000204 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af02      	add	r7, sp, #8
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <DS1307_GetRegByte+0x40>)
 8000210:	6818      	ldr	r0, [r3, #0]
 8000212:	1dfa      	adds	r2, r7, #7
 8000214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2301      	movs	r3, #1
 800021c:	21d0      	movs	r1, #208	; 0xd0
 800021e:	f002 f8d1 	bl	80023c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <DS1307_GetRegByte+0x40>)
 8000224:	6818      	ldr	r0, [r3, #0]
 8000226:	f107 020f 	add.w	r2, r7, #15
 800022a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	2301      	movs	r3, #1
 8000232:	21d0      	movs	r1, #208	; 0xd0
 8000234:	f002 f9c4 	bl	80025c0 <HAL_I2C_Master_Receive>
	return val;
 8000238:	7bfb      	ldrb	r3, [r7, #15]
}
 800023a:	4618      	mov	r0, r3
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	200000a8 	.word	0x200000a8

08000248 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 800024c:	2003      	movs	r0, #3
 800024e:	f7ff ffd9 	bl	8000204 <DS1307_GetRegByte>
 8000252:	4603      	mov	r3, r0
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f91d 	bl	8000494 <DS1307_DecodeBCD>
 800025a:	4603      	mov	r3, r0
}
 800025c:	4618      	mov	r0, r3
 800025e:	bd80      	pop	{r7, pc}

08000260 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8000264:	2004      	movs	r0, #4
 8000266:	f7ff ffcd 	bl	8000204 <DS1307_GetRegByte>
 800026a:	4603      	mov	r3, r0
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f911 	bl	8000494 <DS1307_DecodeBCD>
 8000272:	4603      	mov	r3, r0
}
 8000274:	4618      	mov	r0, r3
 8000276:	bd80      	pop	{r7, pc}

08000278 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 800027c:	2005      	movs	r0, #5
 800027e:	f7ff ffc1 	bl	8000204 <DS1307_GetRegByte>
 8000282:	4603      	mov	r3, r0
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f905 	bl	8000494 <DS1307_DecodeBCD>
 800028a:	4603      	mov	r3, r0
}
 800028c:	4618      	mov	r0, r3
 800028e:	bd80      	pop	{r7, pc}

08000290 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8000296:	2010      	movs	r0, #16
 8000298:	f7ff ffb4 	bl	8000204 <DS1307_GetRegByte>
 800029c:	4603      	mov	r3, r0
 800029e:	b29b      	uxth	r3, r3
 80002a0:	461a      	mov	r2, r3
 80002a2:	0092      	lsls	r2, r2, #2
 80002a4:	4413      	add	r3, r2
 80002a6:	461a      	mov	r2, r3
 80002a8:	0091      	lsls	r1, r2, #2
 80002aa:	461a      	mov	r2, r3
 80002ac:	460b      	mov	r3, r1
 80002ae:	4413      	add	r3, r2
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80002b4:	2006      	movs	r0, #6
 80002b6:	f7ff ffa5 	bl	8000204 <DS1307_GetRegByte>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f8e9 	bl	8000494 <DS1307_DecodeBCD>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	4413      	add	r3, r2
 80002ca:	b29b      	uxth	r3, r3
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 80002d8:	2002      	movs	r0, #2
 80002da:	f7ff ff93 	bl	8000204 <DS1307_GetRegByte>
 80002de:	4603      	mov	r3, r0
 80002e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f8d4 	bl	8000494 <DS1307_DecodeBCD>
 80002ec:	4603      	mov	r3, r0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 80002f2:	b580      	push	{r7, lr}
 80002f4:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 80002f6:	2001      	movs	r0, #1
 80002f8:	f7ff ff84 	bl	8000204 <DS1307_GetRegByte>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f8c8 	bl	8000494 <DS1307_DecodeBCD>
 8000304:	4603      	mov	r3, r0
}
 8000306:	4618      	mov	r0, r3
 8000308:	bd80      	pop	{r7, pc}

0800030a <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 800030e:	2000      	movs	r0, #0
 8000310:	f7ff ff78 	bl	8000204 <DS1307_GetRegByte>
 8000314:	4603      	mov	r3, r0
 8000316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f8b9 	bl	8000494 <DS1307_DecodeBCD>
 8000322:	4603      	mov	r3, r0
}
 8000324:	4618      	mov	r0, r3
 8000326:	bd80      	pop	{r7, pc}

08000328 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f8c5 	bl	80004c4 <DS1307_EncodeBCD>
 800033a:	4603      	mov	r3, r0
 800033c:	4619      	mov	r1, r3
 800033e:	2003      	movs	r0, #3
 8000340:	f7ff ff42 	bl	80001c8 <DS1307_SetRegByte>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f8b3 	bl	80004c4 <DS1307_EncodeBCD>
 800035e:	4603      	mov	r3, r0
 8000360:	4619      	mov	r1, r3
 8000362:	2004      	movs	r0, #4
 8000364:	f7ff ff30 	bl	80001c8 <DS1307_SetRegByte>
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f8a1 	bl	80004c4 <DS1307_EncodeBCD>
 8000382:	4603      	mov	r3, r0
 8000384:	4619      	mov	r1, r3
 8000386:	2005      	movs	r0, #5
 8000388:	f7ff ff1e 	bl	80001c8 <DS1307_SetRegByte>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 800039e:	88fb      	ldrh	r3, [r7, #6]
 80003a0:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <DS1307_SetYear+0x50>)
 80003a2:	fba2 2303 	umull	r2, r3, r2, r3
 80003a6:	095b      	lsrs	r3, r3, #5
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	4619      	mov	r1, r3
 80003ae:	2010      	movs	r0, #16
 80003b0:	f7ff ff0a 	bl	80001c8 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <DS1307_SetYear+0x50>)
 80003b8:	fba2 1203 	umull	r1, r2, r2, r3
 80003bc:	0952      	lsrs	r2, r2, #5
 80003be:	2164      	movs	r1, #100	; 0x64
 80003c0:	fb01 f202 	mul.w	r2, r1, r2
 80003c4:	1a9b      	subs	r3, r3, r2
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f87a 	bl	80004c4 <DS1307_EncodeBCD>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4619      	mov	r1, r3
 80003d4:	2006      	movs	r0, #6
 80003d6:	f7ff fef7 	bl	80001c8 <DS1307_SetRegByte>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	51eb851f 	.word	0x51eb851f

080003e8 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f862 	bl	80004c4 <DS1307_EncodeBCD>
 8000400:	4603      	mov	r3, r0
 8000402:	4619      	mov	r1, r3
 8000404:	2002      	movs	r0, #2
 8000406:	f7ff fedf 	bl	80001c8 <DS1307_SetRegByte>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	4603      	mov	r3, r0
 800041a:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f850 	bl	80004c4 <DS1307_EncodeBCD>
 8000424:	4603      	mov	r3, r0
 8000426:	4619      	mov	r1, r3
 8000428:	2001      	movs	r0, #1
 800042a:	f7ff fecd 	bl	80001c8 <DS1307_SetRegByte>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 8000436:	b580      	push	{r7, lr}
 8000438:	b084      	sub	sp, #16
 800043a:	af00      	add	r7, sp, #0
 800043c:	4603      	mov	r3, r0
 800043e:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8000440:	f7ff feb5 	bl	80001ae <DS1307_GetClockHalt>
 8000444:	4603      	mov	r3, r0
 8000446:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8000448:	79fa      	ldrb	r2, [r7, #7]
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	4313      	orrs	r3, r2
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f000 f837 	bl	80004c4 <DS1307_EncodeBCD>
 8000456:	4603      	mov	r3, r0
 8000458:	4619      	mov	r1, r3
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff feb4 	bl	80001c8 <DS1307_SetRegByte>
}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(int8_t hr, uint8_t min) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	460a      	mov	r2, r1
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	71bb      	strb	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_UTC_HR, hr);
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4619      	mov	r1, r3
 800047c:	2008      	movs	r0, #8
 800047e:	f7ff fea3 	bl	80001c8 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_UTC_MIN, min);
 8000482:	79bb      	ldrb	r3, [r7, #6]
 8000484:	4619      	mov	r1, r3
 8000486:	2009      	movs	r0, #9
 8000488:	f7ff fe9e 	bl	80001c8 <DS1307_SetRegByte>
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	091b      	lsrs	r3, r3, #4
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	0092      	lsls	r2, r2, #2
 80004a8:	4413      	add	r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f003 030f 	and.w	r3, r3, #15
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4413      	add	r3, r2
 80004b8:	b2db      	uxtb	r3, r3
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80004ce:	79fa      	ldrb	r2, [r7, #7]
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <DS1307_EncodeBCD+0x40>)
 80004d2:	fba3 1302 	umull	r1, r3, r3, r2
 80004d6:	08d9      	lsrs	r1, r3, #3
 80004d8:	460b      	mov	r3, r1
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	440b      	add	r3, r1
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	4907      	ldr	r1, [pc, #28]	; (8000504 <DS1307_EncodeBCD+0x40>)
 80004e8:	fba1 1303 	umull	r1, r3, r1, r3
 80004ec:	08db      	lsrs	r3, r3, #3
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	4413      	add	r3, r2
 80004f6:	b2db      	uxtb	r3, r3
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	cccccccd 	.word	0xcccccccd

08000508 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000512:	4a38      	ldr	r2, [pc, #224]	; (80005f4 <HD44780_Init+0xec>)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000518:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <HD44780_Init+0xf0>)
 800051a:	2208      	movs	r2, #8
 800051c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <HD44780_Init+0xf4>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000524:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <HD44780_Init+0xec>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d907      	bls.n	800053c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <HD44780_Init+0xf4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0308 	orr.w	r3, r3, #8
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <HD44780_Init+0xf4>)
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	e006      	b.n	800054a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800053c:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <HD44780_Init+0xf4>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <HD44780_Init+0xf4>)
 8000548:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800054a:	f000 f9ed 	bl	8000928 <DelayInit>
  HAL_Delay(50);
 800054e:	2032      	movs	r0, #50	; 0x32
 8000550:	f001 fb0e 	bl	8001b70 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <HD44780_Init+0xf0>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f9ab 	bl	80008b4 <ExpanderWrite>
  HAL_Delay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f001 fb05 	bl	8001b70 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000566:	2030      	movs	r0, #48	; 0x30
 8000568:	f000 f993 	bl	8000892 <Write4Bits>
  DelayUS(4500);
 800056c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000570:	f000 fa02 	bl	8000978 <DelayUS>

  Write4Bits(0x03 << 4);
 8000574:	2030      	movs	r0, #48	; 0x30
 8000576:	f000 f98c 	bl	8000892 <Write4Bits>
  DelayUS(4500);
 800057a:	f241 1094 	movw	r0, #4500	; 0x1194
 800057e:	f000 f9fb 	bl	8000978 <DelayUS>

  Write4Bits(0x03 << 4);
 8000582:	2030      	movs	r0, #48	; 0x30
 8000584:	f000 f985 	bl	8000892 <Write4Bits>
  DelayUS(4500);
 8000588:	f241 1094 	movw	r0, #4500	; 0x1194
 800058c:	f000 f9f4 	bl	8000978 <DelayUS>

  Write4Bits(0x02 << 4);
 8000590:	2020      	movs	r0, #32
 8000592:	f000 f97e 	bl	8000892 <Write4Bits>
  DelayUS(100);
 8000596:	2064      	movs	r0, #100	; 0x64
 8000598:	f000 f9ee 	bl	8000978 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HD44780_Init+0xf4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f936 	bl	8000818 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HD44780_Init+0xf8>)
 80005ae:	2204      	movs	r2, #4
 80005b0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005b2:	f000 f875 	bl	80006a0 <HD44780_Display>
  HD44780_Clear();
 80005b6:	f000 f82b 	bl	8000610 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HD44780_Init+0xfc>)
 80005bc:	2202      	movs	r2, #2
 80005be:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <HD44780_Init+0xfc>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f924 	bl	8000818 <SendCommand>
  DelayUS(4500);
 80005d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80005d4:	f000 f9d0 	bl	8000978 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005d8:	490b      	ldr	r1, [pc, #44]	; (8000608 <HD44780_Init+0x100>)
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f8b8 	bl	8000750 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005e0:	490a      	ldr	r1, [pc, #40]	; (800060c <HD44780_Init+0x104>)
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 f8b4 	bl	8000750 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005e8:	f000 f81d 	bl	8000626 <HD44780_Home>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200000af 	.word	0x200000af
 80005f8:	200000b0 	.word	0x200000b0
 80005fc:	200000ac 	.word	0x200000ac
 8000600:	200000ad 	.word	0x200000ad
 8000604:	200000ae 	.word	0x200000ae
 8000608:	20000000 	.word	0x20000000
 800060c:	20000008 	.word	0x20000008

08000610 <HD44780_Clear>:

void HD44780_Clear()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000614:	2001      	movs	r0, #1
 8000616:	f000 f8ff 	bl	8000818 <SendCommand>
  DelayUS(2000);
 800061a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061e:	f000 f9ab 	bl	8000978 <DelayUS>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}

08000626 <HD44780_Home>:

void HD44780_Home()
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800062a:	2002      	movs	r0, #2
 800062c:	f000 f8f4 	bl	8000818 <SendCommand>
  DelayUS(2000);
 8000630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000634:	f000 f9a0 	bl	8000978 <DelayUS>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b087      	sub	sp, #28
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HD44780_SetCursor+0x5c>)
 800064e:	f107 0408 	add.w	r4, r7, #8
 8000652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <HD44780_SetCursor+0x60>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	79ba      	ldrb	r2, [r7, #6]
 800065e:	429a      	cmp	r2, r3
 8000660:	d303      	bcc.n	800066a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <HD44780_SetCursor+0x60>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	3318      	adds	r3, #24
 8000670:	443b      	add	r3, r7
 8000672:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4413      	add	r3, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	b25b      	sxtb	r3, r3
 8000680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000684:	b25b      	sxtb	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f8c5 	bl	8000818 <SendCommand>
}
 800068e:	bf00      	nop
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	bf00      	nop
 8000698:	08004b64 	.word	0x08004b64
 800069c:	200000af 	.word	0x200000af

080006a0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HD44780_Display+0x28>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HD44780_Display+0x28>)
 80006b0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HD44780_Display+0x28>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f8ab 	bl	8000818 <SendCommand>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000ad 	.word	0x200000ad

080006cc <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HD44780_NoCursor+0x28>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	f023 0302 	bic.w	r3, r3, #2
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HD44780_NoCursor+0x28>)
 80006dc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HD44780_NoCursor+0x28>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f895 	bl	8000818 <SendCommand>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000ad 	.word	0x200000ad

080006f8 <HD44780_Cursor>:

void HD44780_Cursor()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HD44780_Cursor+0x28>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HD44780_Cursor+0x28>)
 8000708:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HD44780_Cursor+0x28>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f87f 	bl	8000818 <SendCommand>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000ad 	.word	0x200000ad

08000724 <HD44780_Blink>:
  dpControl &= ~LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Blink()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HD44780_Blink+0x28>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HD44780_Blink+0x28>)
 8000734:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HD44780_Blink+0x28>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f869 	bl	8000818 <SendCommand>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000ad 	.word	0x200000ad

08000750 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	b25b      	sxtb	r3, r3
 800076a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076e:	b25b      	sxtb	r3, r3
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f850 	bl	8000818 <SendCommand>
  for (int i=0; i<8; i++)
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e009      	b.n	8000792 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f854 	bl	8000834 <SendChar>
  for (int i=0; i<8; i++)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b07      	cmp	r3, #7
 8000796:	ddf2      	ble.n	800077e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f840 	bl	8000834 <SendChar>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007c4:	e006      	b.n	80007d4 <HD44780_PrintStr+0x18>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f830 	bl	8000834 <SendChar>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1f4      	bne.n	80007c6 <HD44780_PrintStr+0xa>
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HD44780_NoBacklight+0x14>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 f85e 	bl	80008b4 <ExpanderWrite>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000b0 	.word	0x200000b0

08000800 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <HD44780_Backlight+0x14>)
 8000806:	2208      	movs	r2, #8
 8000808:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f852 	bl	80008b4 <ExpanderWrite>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000b0 	.word	0x200000b0

08000818 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f812 	bl	8000850 <Send>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2101      	movs	r1, #1
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f804 	bl	8000850 <Send>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f023 030f 	bic.w	r3, r3, #15
 8000866:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800086e:	7bfa      	ldrb	r2, [r7, #15]
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	4313      	orrs	r3, r2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f80b 	bl	8000892 <Write4Bits>
  Write4Bits((lownib)|mode);
 800087c:	7bba      	ldrb	r2, [r7, #14]
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	4313      	orrs	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f000 f804 	bl	8000892 <Write4Bits>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f808 	bl	80008b4 <ExpanderWrite>
  PulseEnable(value);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f820 	bl	80008ec <PulseEnable>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <ExpanderWrite+0x30>)
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80008ca:	f107 020f 	add.w	r2, r7, #15
 80008ce:	230a      	movs	r3, #10
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2301      	movs	r3, #1
 80008d4:	214e      	movs	r1, #78	; 0x4e
 80008d6:	4804      	ldr	r0, [pc, #16]	; (80008e8 <ExpanderWrite+0x34>)
 80008d8:	f001 fd74 	bl	80023c4 <HAL_I2C_Master_Transmit>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000b0 	.word	0x200000b0
 80008e8:	200000b4 	.word	0x200000b4

080008ec <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffd8 	bl	80008b4 <ExpanderWrite>
  DelayUS(20);
 8000904:	2014      	movs	r0, #20
 8000906:	f000 f837 	bl	8000978 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f023 0304 	bic.w	r3, r3, #4
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ffce 	bl	80008b4 <ExpanderWrite>
  DelayUS(20);
 8000918:	2014      	movs	r0, #20
 800091a:	f000 f82d 	bl	8000978 <DelayUS>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <DelayInit>:

static void DelayInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <DelayInit+0x48>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <DelayInit+0x48>)
 8000932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000936:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <DelayInit+0x48>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <DelayInit+0x48>)
 800093e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000942:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <DelayInit+0x4c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <DelayInit+0x4c>)
 800094a:	f023 0301 	bic.w	r3, r3, #1
 800094e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <DelayInit+0x4c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <DelayInit+0x4c>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <DelayInit+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000962:	bf00      	nop
  __ASM volatile ("NOP");
 8000964:	bf00      	nop
  __ASM volatile ("NOP");
 8000966:	bf00      	nop
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	e000edf0 	.word	0xe000edf0
 8000974:	e0001000 	.word	0xe0001000

08000978 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <DelayUS+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <DelayUS+0x44>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	0c9a      	lsrs	r2, r3, #18
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <DelayUS+0x48>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <DelayUS+0x48>)
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f6      	bhi.n	800099a <DelayUS+0x22>
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000010 	.word	0x20000010
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	e0001000 	.word	0xe0001000

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c8:	f001 f870 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009cc:	f000 f84c 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d0:	f000 f938 	bl	8000c44 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009d4:	f000 f888 	bl	8000ae8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009d8:	f000 f8b4 	bl	8000b44 <MX_I2C2_Init>
  MX_TIM1_Init();
 80009dc:	f000 f8e0 	bl	8000ba0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 80009e0:	2002      	movs	r0, #2
 80009e2:	f7ff fd91 	bl	8000508 <HD44780_Init>


   /* Clear buffer */
   HD44780_Clear();
 80009e6:	f7ff fe13 	bl	8000610 <HD44780_Clear>


   DS1307_Init(&hi2c2);
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <main+0x9c>)
 80009ec:	f7ff fbae 	bl	800014c <DS1307_Init>
   DS1307_SetTimeZone(+7, 00);
 80009f0:	2100      	movs	r1, #0
 80009f2:	2007      	movs	r0, #7
 80009f4:	f7ff fd38 	bl	8000468 <DS1307_SetTimeZone>
   DS1307_SetDate(07);
 80009f8:	2007      	movs	r0, #7
 80009fa:	f7ff fca7 	bl	800034c <DS1307_SetDate>
   DS1307_SetMonth(05);
 80009fe:	2005      	movs	r0, #5
 8000a00:	f7ff fcb6 	bl	8000370 <DS1307_SetMonth>
   DS1307_SetYear(24);
 8000a04:	2018      	movs	r0, #24
 8000a06:	f7ff fcc5 	bl	8000394 <DS1307_SetYear>
   DS1307_SetDayOfWeek(3);
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	f7ff fc8c 	bl	8000328 <DS1307_SetDayOfWeek>
   DS1307_SetHour(0);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fce9 	bl	80003e8 <DS1307_SetHour>
   DS1307_SetMinute(0);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fcfb 	bl	8000412 <DS1307_SetMinute>
   DS1307_SetSecond(00);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fd0a 	bl	8000436 <DS1307_SetSecond>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(mode)
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <main+0xa0>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d816      	bhi.n	8000a58 <main+0x94>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <main+0x6c>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000a41 	.word	0x08000a41
 8000a34:	08000a47 	.word	0x08000a47
 8000a38:	08000a4d 	.word	0x08000a4d
 8000a3c:	08000a53 	.word	0x08000a53
	  {
	  case 0:
		  Display();
 8000a40:	f000 fb14 	bl	800106c <Display>
		  break;
 8000a44:	e008      	b.n	8000a58 <main+0x94>
	  case 1:
		  Configuration();
 8000a46:	f000 fc2b 	bl	80012a0 <Configuration>
		  break;
 8000a4a:	e005      	b.n	8000a58 <main+0x94>
	  case 2:
		  Set_Alarm();
 8000a4c:	f000 fe1a 	bl	8001684 <Set_Alarm>
		  break;
 8000a50:	e002      	b.n	8000a58 <main+0x94>
	  case 3:
		  Stop_Watch();
 8000a52:	f000 ff37 	bl	80018c4 <Stop_Watch>
		  break;
 8000a56:	bf00      	nop
	  }
	  HAL_Delay(10);
 8000a58:	200a      	movs	r0, #10
 8000a5a:	f001 f889 	bl	8001b70 <HAL_Delay>
	  switch(mode)
 8000a5e:	e7e0      	b.n	8000a22 <main+0x5e>
 8000a60:	20000108 	.word	0x20000108
 8000a64:	200001a4 	.word	0x200001a4

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b090      	sub	sp, #64	; 0x40
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0318 	add.w	r3, r7, #24
 8000a72:	2228      	movs	r2, #40	; 0x28
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 fbe6 	bl	8004248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a92:	2310      	movs	r3, #16
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 fb7b 	bl	80031a4 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ab4:	f000 f936 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fde9 	bl	80036a8 <HAL_RCC_ClockConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000adc:	f000 f922 	bl	8000d24 <Error_Handler>
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3740      	adds	r7, #64	; 0x40
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000aee:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <MX_I2C1_Init+0x54>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000af4:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_I2C1_Init+0x58>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b26:	f001 fb09 	bl	800213c <HAL_I2C_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b30:	f000 f8f8 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200000b4 	.word	0x200000b4
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	000186a0 	.word	0x000186a0

08000b44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_I2C2_Init+0x58>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_I2C2_Init+0x50>)
 8000b82:	f001 fadb 	bl	800213c <HAL_I2C_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f000 f8ca 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000108 	.word	0x20000108
 8000b98:	40005800 	.word	0x40005800
 8000b9c:	000186a0 	.word	0x000186a0

08000ba0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000bbe:	4a20      	ldr	r2, [pc, #128]	; (8000c40 <MX_TIM1_Init+0xa0>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24000-1;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000bc4:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000bc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000bd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bea:	4814      	ldr	r0, [pc, #80]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000bec:	f002 fed6 	bl	800399c <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000bf6:	f000 f895 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000c08:	f003 f8a0 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c12:	f000 f887 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <MX_TIM1_Init+0x9c>)
 8000c24:	f003 fa76 	bl	8004114 <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000c2e:	f000 f879 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000015c 	.word	0x2000015c
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <MX_GPIO_Init+0xcc>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a2c      	ldr	r2, [pc, #176]	; (8000d10 <MX_GPIO_Init+0xcc>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_GPIO_Init+0xcc>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <MX_GPIO_Init+0xcc>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a26      	ldr	r2, [pc, #152]	; (8000d10 <MX_GPIO_Init+0xcc>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <MX_GPIO_Init+0xcc>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_GPIO_Init+0xd0>)
 8000c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481f      	ldr	r0, [pc, #124]	; (8000d18 <MX_GPIO_Init+0xd4>)
 8000c9c:	f001 f89a 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4819      	ldr	r0, [pc, #100]	; (8000d18 <MX_GPIO_Init+0xd4>)
 8000cb4:	f001 f88e 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4814      	ldr	r0, [pc, #80]	; (8000d1c <MX_GPIO_Init+0xd8>)
 8000ccc:	f001 f882 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_GPIO_Init+0xdc>)
 8000cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <MX_GPIO_Init+0xd8>)
 8000ce4:	f001 f876 	bl	8001dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2007      	movs	r0, #7
 8000cee:	f001 f83a 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cf2:	2007      	movs	r0, #7
 8000cf4:	f001 f853 	bl	8001d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f001 f832 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d02:	200a      	movs	r0, #10
 8000d04:	f001 f84b 	bl	8001d9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	10110000 	.word	0x10110000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	10310000 	.word	0x10310000

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_MspInit+0x60>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_MspInit+0x60>)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010000 	.word	0x40010000

08000d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a2b      	ldr	r2, [pc, #172]	; (8000e5c <HAL_I2C_MspInit+0xc8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d124      	bne.n	8000dfe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0308 	and.w	r3, r3, #8
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dcc:	23c0      	movs	r3, #192	; 0xc0
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4821      	ldr	r0, [pc, #132]	; (8000e64 <HAL_I2C_MspInit+0xd0>)
 8000de0:	f000 fff8 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000dea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dee:	61d3      	str	r3, [r2, #28]
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dfc:	e029      	b.n	8000e52 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_I2C_MspInit+0xd4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d124      	bne.n	8000e52 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e26:	2312      	movs	r3, #18
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0318 	add.w	r3, r7, #24
 8000e32:	4619      	mov	r1, r3
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <HAL_I2C_MspInit+0xd0>)
 8000e36:	f000 ffcd 	bl	8001dd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000e40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_I2C_MspInit+0xcc>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010c00 	.word	0x40010c00
 8000e68:	40005800 	.word	0x40005800

08000e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_TIM_Base_MspInit+0x44>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d113      	bne.n	8000ea6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_TIM_Base_MspInit+0x48>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <HAL_TIM_Base_MspInit+0x48>)
 8000e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_TIM_Base_MspInit+0x48>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2019      	movs	r0, #25
 8000e9c:	f000 ff63 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ea0:	2019      	movs	r0, #25
 8000ea2:	f000 ff7c 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40012c00 	.word	0x40012c00
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efe:	f000 fe1b 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f001 f8fe 	bl	800210c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f18:	2010      	movs	r0, #16
 8000f1a:	f001 f8f7 	bl	800210c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <TIM1_UP_IRQHandler+0x10>)
 8000f2a:	f002 fe07 	bl	8003b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000015c 	.word	0x2000015c

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f003 f944 	bl	80041f4 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20005000 	.word	0x20005000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	200001a8 	.word	0x200001a8
 8000fa0:	200001e0 	.word	0x200001e0

08000fa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_GPIO_EXTI_Callback>:
uint8_t minute_3 = 0;
uint8_t second_3 = 0;



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1){
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d10c      	bne.n	8000fda <HAL_GPIO_EXTI_Callback+0x2a>
		mode++;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000fca:	701a      	strb	r2, [r3, #0]
		if(mode > 3)mode = 0;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d902      	bls.n	8000fda <HAL_GPIO_EXTI_Callback+0x2a>
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_4){
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	2b10      	cmp	r3, #16
 8000fde:	d102      	bne.n	8000fe6 <HAL_GPIO_EXTI_Callback+0x36>
		flag = 1;
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	200001a4 	.word	0x200001a4
 8000ff4:	200001ac 	.word	0x200001ac

08000ff8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d123      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x5a>
		second_3++;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001014:	701a      	strb	r2, [r3, #0]
		if(second_3 > 59)second_3 = 0;
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b3b      	cmp	r3, #59	; 0x3b
 800101c:	d902      	bls.n	8001024 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
		if(second_3 > 58){
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b3a      	cmp	r3, #58	; 0x3a
 800102a:	d905      	bls.n	8001038 <HAL_TIM_PeriodElapsedCallback+0x40>
			minute_3++;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001036:	701a      	strb	r2, [r3, #0]
		}
		if(minute_3 > 58){
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b3a      	cmp	r3, #58	; 0x3a
 800103e:	d908      	bls.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x5a>
			minute_3 = 0;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
			hour_3++;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001050:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40012c00 	.word	0x40012c00
 8001060:	200001c5 	.word	0x200001c5
 8001064:	200001c4 	.word	0x200001c4
 8001068:	200001c3 	.word	0x200001c3

0800106c <Display>:

//mode: 0
void Display(){
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
	uint8_t date = DS1307_GetDate();
 8001072:	f7ff f8f5 	bl	8000260 <DS1307_GetDate>
 8001076:	4603      	mov	r3, r0
 8001078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = DS1307_GetMonth();
 800107c:	f7ff f8fc 	bl	8000278 <DS1307_GetMonth>
 8001080:	4603      	mov	r3, r0
 8001082:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint16_t year = DS1307_GetYear();
 8001086:	f7ff f903 	bl	8000290 <DS1307_GetYear>
 800108a:	4603      	mov	r3, r0
 800108c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t dow = DS1307_GetDayOfWeek();
 800108e:	f7ff f8db 	bl	8000248 <DS1307_GetDayOfWeek>
 8001092:	4603      	mov	r3, r0
 8001094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t hour = DS1307_GetHour();
 8001098:	f7ff f91c 	bl	80002d4 <DS1307_GetHour>
 800109c:	4603      	mov	r3, r0
 800109e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t minute = DS1307_GetMinute();
 80010a2:	f7ff f926 	bl	80002f2 <DS1307_GetMinute>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t second = DS1307_GetSecond();
 80010ac:	f7ff f92d 	bl	800030a <DS1307_GetSecond>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	//uint8_t zone_hr = DS1307_GetTimeZoneHour();
	//uint8_t zone_min = DS1307_GetTimeZoneMin();
	char *DAYS_OF_WEEK[7] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
 80010b6:	4b70      	ldr	r3, [pc, #448]	; (8001278 <Display+0x20c>)
 80010b8:	f107 040c 	add.w	r4, r7, #12
 80010bc:	461d      	mov	r5, r3
 80010be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char str[10];
	HD44780_Clear();
 80010ca:	f7ff faa1 	bl	8000610 <HD44780_Clear>
	HD44780_Cursor();
 80010ce:	f7ff fb13 	bl	80006f8 <HD44780_Cursor>
	HD44780_SetCursor(0, 0);
 80010d2:	2100      	movs	r1, #0
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fab1 	bl	800063c <HD44780_SetCursor>
	HD44780_PrintStr(DAYS_OF_WEEK[dow-1]);
 80010da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010de:	3b01      	subs	r3, #1
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	3330      	adds	r3, #48	; 0x30
 80010e4:	443b      	add	r3, r7
 80010e6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fb66 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(47);
 80010f0:	202f      	movs	r0, #47	; 0x2f
 80010f2:	f7ff fb56 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", date);
 80010f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80010fa:	463b      	mov	r3, r7
 80010fc:	495f      	ldr	r1, [pc, #380]	; (800127c <Display+0x210>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 f8aa 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 8001104:	463b      	mov	r3, r7
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fb58 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(47);
 800110c:	202f      	movs	r0, #47	; 0x2f
 800110e:	f7ff fb48 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", month);
 8001112:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001116:	463b      	mov	r3, r7
 8001118:	4958      	ldr	r1, [pc, #352]	; (800127c <Display+0x210>)
 800111a:	4618      	mov	r0, r3
 800111c:	f003 f89c 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 8001120:	463b      	mov	r3, r7
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fb4a 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(47);
 8001128:	202f      	movs	r0, #47	; 0x2f
 800112a:	f7ff fb3a 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", year);
 800112e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001130:	463b      	mov	r3, r7
 8001132:	4952      	ldr	r1, [pc, #328]	; (800127c <Display+0x210>)
 8001134:	4618      	mov	r0, r3
 8001136:	f003 f88f 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 800113a:	463b      	mov	r3, r7
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fb3d 	bl	80007bc <HD44780_PrintStr>

	HD44780_SetCursor(0, 1);
 8001142:	2101      	movs	r1, #1
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fa79 	bl	800063c <HD44780_SetCursor>
	sprintf(str, "%d", hour);
 800114a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800114e:	463b      	mov	r3, r7
 8001150:	494a      	ldr	r1, [pc, #296]	; (800127c <Display+0x210>)
 8001152:	4618      	mov	r0, r3
 8001154:	f003 f880 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 8001158:	463b      	mov	r3, r7
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fb2e 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0x3a);
 8001160:	203a      	movs	r0, #58	; 0x3a
 8001162:	f7ff fb1e 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", minute);
 8001166:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800116a:	463b      	mov	r3, r7
 800116c:	4943      	ldr	r1, [pc, #268]	; (800127c <Display+0x210>)
 800116e:	4618      	mov	r0, r3
 8001170:	f003 f872 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 8001174:	463b      	mov	r3, r7
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fb20 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0x3a);
 800117c:	203a      	movs	r0, #58	; 0x3a
 800117e:	f7ff fb10 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", second);
 8001182:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001186:	463b      	mov	r3, r7
 8001188:	493c      	ldr	r1, [pc, #240]	; (800127c <Display+0x210>)
 800118a:	4618      	mov	r0, r3
 800118c:	f003 f864 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 8001190:	463b      	mov	r3, r7
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fb12 	bl	80007bc <HD44780_PrintStr>
	HD44780_NoCursor();
 8001198:	f7ff fa98 	bl	80006cc <HD44780_NoCursor>

	HAL_Delay(1000);
 800119c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a0:	f000 fce6 	bl	8001b70 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 80011a4:	2120      	movs	r1, #32
 80011a6:	4836      	ldr	r0, [pc, #216]	; (8001280 <Display+0x214>)
 80011a8:	f000 ff98 	bl	80020dc <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d126      	bne.n	8001200 <Display+0x194>
		HAL_Delay(100);
 80011b2:	2064      	movs	r0, #100	; 0x64
 80011b4:	f000 fcdc 	bl	8001b70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 80011b8:	2120      	movs	r1, #32
 80011ba:	4831      	ldr	r0, [pc, #196]	; (8001280 <Display+0x214>)
 80011bc:	f000 ff8e 	bl	80020dc <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d11c      	bne.n	8001200 <Display+0x194>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1);
 80011c6:	bf00      	nop
 80011c8:	2120      	movs	r1, #32
 80011ca:	482d      	ldr	r0, [pc, #180]	; (8001280 <Display+0x214>)
 80011cc:	f000 ff86 	bl	80020dc <HAL_GPIO_ReadPin>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d0f8      	beq.n	80011c8 <Display+0x15c>
			light = ~light;
 80011d6:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <Display+0x218>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	43db      	mvns	r3, r3
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <Display+0x218>)
 80011e0:	701a      	strb	r2, [r3, #0]
			if(light == 0)HD44780_NoBacklight();
 80011e2:	4b28      	ldr	r3, [pc, #160]	; (8001284 <Display+0x218>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <Display+0x182>
 80011ea:	f7ff fafd 	bl	80007e8 <HD44780_NoBacklight>
			if(light != 0)HD44780_Backlight();
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <Display+0x218>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <Display+0x18e>
 80011f6:	f7ff fb03 	bl	8000800 <HD44780_Backlight>
			blink = 0;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <Display+0x21c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Alarm_flag == 1){
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <Display+0x220>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d117      	bne.n	8001238 <Display+0x1cc>
		if (hour == hour_set){
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <Display+0x224>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001210:	429a      	cmp	r2, r3
 8001212:	d111      	bne.n	8001238 <Display+0x1cc>
			if(minute == minute_set){
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <Display+0x228>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800121c:	429a      	cmp	r2, r3
 800121e:	d10b      	bne.n	8001238 <Display+0x1cc>
				if(second == second_set){
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <Display+0x22c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001228:	429a      	cmp	r2, r3
 800122a:	d105      	bne.n	8001238 <Display+0x1cc>
					Alarm_flag = 0;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <Display+0x220>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
					blink = 1;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <Display+0x21c>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	if (blink == 1){
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <Display+0x21c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d117      	bne.n	8001270 <Display+0x204>
		cnt++;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <Display+0x230>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <Display+0x230>)
 8001248:	6013      	str	r3, [r2, #0]
		if(cnt > 100)cnt = 0;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <Display+0x230>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d902      	bls.n	8001258 <Display+0x1ec>
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <Display+0x230>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
		if(cnt < 50)HD44780_NoBacklight();
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <Display+0x230>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b31      	cmp	r3, #49	; 0x31
 800125e:	d801      	bhi.n	8001264 <Display+0x1f8>
 8001260:	f7ff fac2 	bl	80007e8 <HD44780_NoBacklight>
		if(cnt > 50)HD44780_Backlight();
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <Display+0x230>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b32      	cmp	r3, #50	; 0x32
 800126a:	d901      	bls.n	8001270 <Display+0x204>
 800126c:	f7ff fac8 	bl	8000800 <HD44780_Backlight>
	}

}
 8001270:	bf00      	nop
 8001272:	3730      	adds	r7, #48	; 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	08004b94 	.word	0x08004b94
 800127c:	08004b90 	.word	0x08004b90
 8001280:	40010800 	.word	0x40010800
 8001284:	200001c1 	.word	0x200001c1
 8001288:	200001b0 	.word	0x200001b0
 800128c:	200001c2 	.word	0x200001c2
 8001290:	200001be 	.word	0x200001be
 8001294:	200001bf 	.word	0x200001bf
 8001298:	200001c0 	.word	0x200001c0
 800129c:	200001b8 	.word	0x200001b8

080012a0 <Configuration>:

//mode:1
void Configuration(){
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
	char str[10];
	const char *DAYS_OF_WEEK[7] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
 80012a6:	4bb0      	ldr	r3, [pc, #704]	; (8001568 <Configuration+0x2c8>)
 80012a8:	463c      	mov	r4, r7
 80012aa:	461d      	mov	r5, r3
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HD44780_Clear();
 80012b8:	f7ff f9aa 	bl	8000610 <HD44780_Clear>
	HD44780_Cursor();
 80012bc:	f7ff fa1c 	bl	80006f8 <HD44780_Cursor>
	HD44780_SetCursor(0, 0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff f9ba 	bl	800063c <HD44780_SetCursor>
	HD44780_PrintStr(DAYS_OF_WEEK[dow_set-1]);
 80012c8:	4ba8      	ldr	r3, [pc, #672]	; (800156c <Configuration+0x2cc>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	3328      	adds	r3, #40	; 0x28
 80012d2:	443b      	add	r3, r7
 80012d4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fa6f 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(47);
 80012de:	202f      	movs	r0, #47	; 0x2f
 80012e0:	f7ff fa5f 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", date_set);
 80012e4:	4ba2      	ldr	r3, [pc, #648]	; (8001570 <Configuration+0x2d0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	49a1      	ldr	r1, [pc, #644]	; (8001574 <Configuration+0x2d4>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 ffb1 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fa5e 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(47);
 8001300:	202f      	movs	r0, #47	; 0x2f
 8001302:	f7ff fa4e 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", month_set);
 8001306:	4b9c      	ldr	r3, [pc, #624]	; (8001578 <Configuration+0x2d8>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4998      	ldr	r1, [pc, #608]	; (8001574 <Configuration+0x2d4>)
 8001312:	4618      	mov	r0, r3
 8001314:	f002 ffa0 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fa4d 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(47);
 8001322:	202f      	movs	r0, #47	; 0x2f
 8001324:	f7ff fa3d 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%ld", year_set);
 8001328:	4b94      	ldr	r3, [pc, #592]	; (800157c <Configuration+0x2dc>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4993      	ldr	r1, [pc, #588]	; (8001580 <Configuration+0x2e0>)
 8001332:	4618      	mov	r0, r3
 8001334:	f002 ff90 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fa3d 	bl	80007bc <HD44780_PrintStr>

	HD44780_SetCursor(0, 1);
 8001342:	2101      	movs	r1, #1
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff f979 	bl	800063c <HD44780_SetCursor>
	sprintf(str, "%d", hour_set);
 800134a:	4b8e      	ldr	r3, [pc, #568]	; (8001584 <Configuration+0x2e4>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4987      	ldr	r1, [pc, #540]	; (8001574 <Configuration+0x2d4>)
 8001356:	4618      	mov	r0, r3
 8001358:	f002 ff7e 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fa2b 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0x3a);
 8001366:	203a      	movs	r0, #58	; 0x3a
 8001368:	f7ff fa1b 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", minute_set);
 800136c:	4b86      	ldr	r3, [pc, #536]	; (8001588 <Configuration+0x2e8>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	497f      	ldr	r1, [pc, #508]	; (8001574 <Configuration+0x2d4>)
 8001378:	4618      	mov	r0, r3
 800137a:	f002 ff6d 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fa1a 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0x3a);
 8001388:	203a      	movs	r0, #58	; 0x3a
 800138a:	f7ff fa0a 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", second_set);
 800138e:	4b7f      	ldr	r3, [pc, #508]	; (800158c <Configuration+0x2ec>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4976      	ldr	r1, [pc, #472]	; (8001574 <Configuration+0x2d4>)
 800139a:	4618      	mov	r0, r3
 800139c:	f002 ff5c 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fa09 	bl	80007bc <HD44780_PrintStr>
	HD44780_SetCursor(cursor_col, cursor_row);
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <Configuration+0x2f0>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4a79      	ldr	r2, [pc, #484]	; (8001594 <Configuration+0x2f4>)
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f941 	bl	800063c <HD44780_SetCursor>
	HD44780_Blink();
 80013ba:	f7ff f9b3 	bl	8000724 <HD44780_Blink>

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 80013be:	2120      	movs	r1, #32
 80013c0:	4875      	ldr	r0, [pc, #468]	; (8001598 <Configuration+0x2f8>)
 80013c2:	f000 fe8b 	bl	80020dc <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d164      	bne.n	8001496 <Configuration+0x1f6>
		HAL_Delay(100);
 80013cc:	2064      	movs	r0, #100	; 0x64
 80013ce:	f000 fbcf 	bl	8001b70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 80013d2:	2120      	movs	r1, #32
 80013d4:	4870      	ldr	r0, [pc, #448]	; (8001598 <Configuration+0x2f8>)
 80013d6:	f000 fe81 	bl	80020dc <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d15a      	bne.n	8001496 <Configuration+0x1f6>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1);
 80013e0:	bf00      	nop
 80013e2:	2120      	movs	r1, #32
 80013e4:	486c      	ldr	r0, [pc, #432]	; (8001598 <Configuration+0x2f8>)
 80013e6:	f000 fe79 	bl	80020dc <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d0f8      	beq.n	80013e2 <Configuration+0x142>
			flag1++;
 80013f0:	4b6a      	ldr	r3, [pc, #424]	; (800159c <Configuration+0x2fc>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <Configuration+0x2fc>)
 80013fa:	701a      	strb	r2, [r3, #0]
			if(flag1 > 7)flag1 = 1;
 80013fc:	4b67      	ldr	r3, [pc, #412]	; (800159c <Configuration+0x2fc>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b07      	cmp	r3, #7
 8001402:	d902      	bls.n	800140a <Configuration+0x16a>
 8001404:	4b65      	ldr	r3, [pc, #404]	; (800159c <Configuration+0x2fc>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
			if(flag1 == 1){
 800140a:	4b64      	ldr	r3, [pc, #400]	; (800159c <Configuration+0x2fc>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d105      	bne.n	800141e <Configuration+0x17e>
				cursor_row = 1;
 8001412:	4b60      	ldr	r3, [pc, #384]	; (8001594 <Configuration+0x2f4>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
				cursor_col = 5;
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <Configuration+0x2f0>)
 800141a:	2205      	movs	r2, #5
 800141c:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 2){
 800141e:	4b5f      	ldr	r3, [pc, #380]	; (800159c <Configuration+0x2fc>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d105      	bne.n	8001432 <Configuration+0x192>
				cursor_row = 1;
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <Configuration+0x2f4>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
				cursor_col = 3;
 800142c:	4b58      	ldr	r3, [pc, #352]	; (8001590 <Configuration+0x2f0>)
 800142e:	2203      	movs	r2, #3
 8001430:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 3){
 8001432:	4b5a      	ldr	r3, [pc, #360]	; (800159c <Configuration+0x2fc>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d105      	bne.n	8001446 <Configuration+0x1a6>
				cursor_row = 1;
 800143a:	4b56      	ldr	r3, [pc, #344]	; (8001594 <Configuration+0x2f4>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
				cursor_col = 0;
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <Configuration+0x2f0>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 4){
 8001446:	4b55      	ldr	r3, [pc, #340]	; (800159c <Configuration+0x2fc>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b04      	cmp	r3, #4
 800144c:	d105      	bne.n	800145a <Configuration+0x1ba>
				cursor_row = 0;
 800144e:	4b51      	ldr	r3, [pc, #324]	; (8001594 <Configuration+0x2f4>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
				cursor_col = 10;
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <Configuration+0x2f0>)
 8001456:	220a      	movs	r2, #10
 8001458:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 5){
 800145a:	4b50      	ldr	r3, [pc, #320]	; (800159c <Configuration+0x2fc>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b05      	cmp	r3, #5
 8001460:	d105      	bne.n	800146e <Configuration+0x1ce>
				cursor_row = 0;
 8001462:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <Configuration+0x2f4>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
				cursor_col = 6;
 8001468:	4b49      	ldr	r3, [pc, #292]	; (8001590 <Configuration+0x2f0>)
 800146a:	2206      	movs	r2, #6
 800146c:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 6){
 800146e:	4b4b      	ldr	r3, [pc, #300]	; (800159c <Configuration+0x2fc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d105      	bne.n	8001482 <Configuration+0x1e2>
				cursor_row = 0;
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <Configuration+0x2f4>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
				cursor_col = 4;
 800147c:	4b44      	ldr	r3, [pc, #272]	; (8001590 <Configuration+0x2f0>)
 800147e:	2204      	movs	r2, #4
 8001480:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 7){
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <Configuration+0x2fc>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b07      	cmp	r3, #7
 8001488:	d105      	bne.n	8001496 <Configuration+0x1f6>
				cursor_row = 0;
 800148a:	4b42      	ldr	r3, [pc, #264]	; (8001594 <Configuration+0x2f4>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
				cursor_col = 2;
 8001490:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <Configuration+0x2f0>)
 8001492:	2202      	movs	r2, #2
 8001494:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1){
 8001496:	2101      	movs	r1, #1
 8001498:	4841      	ldr	r0, [pc, #260]	; (80015a0 <Configuration+0x300>)
 800149a:	f000 fe1f 	bl	80020dc <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	f040 80a8 	bne.w	80015f6 <Configuration+0x356>
		HAL_Delay(100);
 80014a6:	2064      	movs	r0, #100	; 0x64
 80014a8:	f000 fb62 	bl	8001b70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1){
 80014ac:	2101      	movs	r1, #1
 80014ae:	483c      	ldr	r0, [pc, #240]	; (80015a0 <Configuration+0x300>)
 80014b0:	f000 fe14 	bl	80020dc <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	f040 809d 	bne.w	80015f6 <Configuration+0x356>
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1);
 80014bc:	bf00      	nop
 80014be:	2101      	movs	r1, #1
 80014c0:	4837      	ldr	r0, [pc, #220]	; (80015a0 <Configuration+0x300>)
 80014c2:	f000 fe0b 	bl	80020dc <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d0f8      	beq.n	80014be <Configuration+0x21e>
			if(flag1 == 1){
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <Configuration+0x2fc>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d10c      	bne.n	80014ee <Configuration+0x24e>
				second_set++;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <Configuration+0x2ec>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <Configuration+0x2ec>)
 80014de:	701a      	strb	r2, [r3, #0]
				if(second_set > 59)second_set = 0;
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <Configuration+0x2ec>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b3b      	cmp	r3, #59	; 0x3b
 80014e6:	d902      	bls.n	80014ee <Configuration+0x24e>
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <Configuration+0x2ec>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 2){
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <Configuration+0x2fc>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d10c      	bne.n	8001510 <Configuration+0x270>
				minute_set++;
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <Configuration+0x2e8>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <Configuration+0x2e8>)
 8001500:	701a      	strb	r2, [r3, #0]
				if(minute_set > 59)minute_set = 0;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <Configuration+0x2e8>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b3b      	cmp	r3, #59	; 0x3b
 8001508:	d902      	bls.n	8001510 <Configuration+0x270>
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <Configuration+0x2e8>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 3){
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <Configuration+0x2fc>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d10c      	bne.n	8001532 <Configuration+0x292>
				hour_set++;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <Configuration+0x2e4>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <Configuration+0x2e4>)
 8001522:	701a      	strb	r2, [r3, #0]
				if(hour_set > 23)hour_set = 0;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <Configuration+0x2e4>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b17      	cmp	r3, #23
 800152a:	d902      	bls.n	8001532 <Configuration+0x292>
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <Configuration+0x2e4>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 4){
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <Configuration+0x2fc>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b04      	cmp	r3, #4
 8001538:	d10b      	bne.n	8001552 <Configuration+0x2b2>
				year_set++;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <Configuration+0x2dc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <Configuration+0x2dc>)
 8001542:	6013      	str	r3, [r2, #0]
				if(year_set > 26)year_set = 22;
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <Configuration+0x2dc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b1a      	cmp	r3, #26
 800154a:	d902      	bls.n	8001552 <Configuration+0x2b2>
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <Configuration+0x2dc>)
 800154e:	2216      	movs	r2, #22
 8001550:	601a      	str	r2, [r3, #0]
			}
			if(flag1 == 5){
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <Configuration+0x2fc>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b05      	cmp	r3, #5
 8001558:	d12b      	bne.n	80015b2 <Configuration+0x312>
				month_set++;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <Configuration+0x2d8>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <Configuration+0x2d8>)
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	e01d      	b.n	80015a4 <Configuration+0x304>
 8001568:	08004b94 	.word	0x08004b94
 800156c:	2000001c 	.word	0x2000001c
 8001570:	200001bc 	.word	0x200001bc
 8001574:	08004b90 	.word	0x08004b90
 8001578:	200001bd 	.word	0x200001bd
 800157c:	20000018 	.word	0x20000018
 8001580:	08004bb0 	.word	0x08004bb0
 8001584:	200001be 	.word	0x200001be
 8001588:	200001bf 	.word	0x200001bf
 800158c:	200001c0 	.word	0x200001c0
 8001590:	20000015 	.word	0x20000015
 8001594:	20000014 	.word	0x20000014
 8001598:	40010800 	.word	0x40010800
 800159c:	200001ad 	.word	0x200001ad
 80015a0:	40010c00 	.word	0x40010c00
				if(month_set > 12)month_set = 1;
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <Configuration+0x3bc>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d902      	bls.n	80015b2 <Configuration+0x312>
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <Configuration+0x3bc>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 6){
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <Configuration+0x3c0>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d10c      	bne.n	80015d4 <Configuration+0x334>
				date_set++;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <Configuration+0x3c4>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <Configuration+0x3c4>)
 80015c4:	701a      	strb	r2, [r3, #0]
				if(date_set > 31)date_set = 1;
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <Configuration+0x3c4>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b1f      	cmp	r3, #31
 80015cc:	d902      	bls.n	80015d4 <Configuration+0x334>
 80015ce:	4b25      	ldr	r3, [pc, #148]	; (8001664 <Configuration+0x3c4>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
			}
			if(flag1 == 7){
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <Configuration+0x3c0>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b07      	cmp	r3, #7
 80015da:	d10c      	bne.n	80015f6 <Configuration+0x356>
				dow_set++;
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <Configuration+0x3c8>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <Configuration+0x3c8>)
 80015e6:	701a      	strb	r2, [r3, #0]
				if(dow_set > 7)dow_set = 1;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <Configuration+0x3c8>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b07      	cmp	r3, #7
 80015ee:	d902      	bls.n	80015f6 <Configuration+0x356>
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <Configuration+0x3c8>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	// Nhấn phím PA4 để lưu lại thông tin (ghi giá trị vào thanh ghi của DS1307).
	if(flag == 1){
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <Configuration+0x3cc>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d129      	bne.n	8001652 <Configuration+0x3b2>
		   DS1307_SetDate(date_set);
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <Configuration+0x3c4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fea2 	bl	800034c <DS1307_SetDate>
		   DS1307_SetMonth(month_set);
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <Configuration+0x3bc>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe feaf 	bl	8000370 <DS1307_SetMonth>
		   DS1307_SetYear(year_set);
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <Configuration+0x3d0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe febb 	bl	8000394 <DS1307_SetYear>
		   DS1307_SetDayOfWeek(dow_set);
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <Configuration+0x3c8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fe80 	bl	8000328 <DS1307_SetDayOfWeek>
		   DS1307_SetHour(hour_set);
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <Configuration+0x3d4>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fedb 	bl	80003e8 <DS1307_SetHour>
		   DS1307_SetMinute(minute_set);
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <Configuration+0x3d8>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe feeb 	bl	8000412 <DS1307_SetMinute>
		   DS1307_SetSecond(second_set);
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <Configuration+0x3dc>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fef8 	bl	8000436 <DS1307_SetSecond>
		   flag = 0;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <Configuration+0x3cc>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
		   mode = 0;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <Configuration+0x3e0>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
	}

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bdb0      	pop	{r4, r5, r7, pc}
 800165a:	bf00      	nop
 800165c:	200001bd 	.word	0x200001bd
 8001660:	200001ad 	.word	0x200001ad
 8001664:	200001bc 	.word	0x200001bc
 8001668:	2000001c 	.word	0x2000001c
 800166c:	200001ac 	.word	0x200001ac
 8001670:	20000018 	.word	0x20000018
 8001674:	200001be 	.word	0x200001be
 8001678:	200001bf 	.word	0x200001bf
 800167c:	200001c0 	.word	0x200001c0
 8001680:	200001a4 	.word	0x200001a4

08001684 <Set_Alarm>:

//mode:2
void Set_Alarm(){
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
	char str[10];
	HD44780_Clear();
 800168a:	f7fe ffc1 	bl	8000610 <HD44780_Clear>
	HD44780_Cursor();
 800168e:	f7ff f833 	bl	80006f8 <HD44780_Cursor>
	HD44780_SetCursor(0, 0);
 8001692:	2100      	movs	r1, #0
 8001694:	2000      	movs	r0, #0
 8001696:	f7fe ffd1 	bl	800063c <HD44780_SetCursor>
	HD44780_PrintStr("SET ALARM");
 800169a:	487d      	ldr	r0, [pc, #500]	; (8001890 <Set_Alarm+0x20c>)
 800169c:	f7ff f88e 	bl	80007bc <HD44780_PrintStr>

	HD44780_SetCursor(0, 1);
 80016a0:	2101      	movs	r1, #1
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7fe ffca 	bl	800063c <HD44780_SetCursor>
	sprintf(str, "%d", hour_set);
 80016a8:	4b7a      	ldr	r3, [pc, #488]	; (8001894 <Set_Alarm+0x210>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4979      	ldr	r1, [pc, #484]	; (8001898 <Set_Alarm+0x214>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fdd0 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f87e 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0x3a);
 80016c0:	203a      	movs	r0, #58	; 0x3a
 80016c2:	f7ff f86e 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", minute_set);
 80016c6:	4b75      	ldr	r3, [pc, #468]	; (800189c <Set_Alarm+0x218>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4972      	ldr	r1, [pc, #456]	; (8001898 <Set_Alarm+0x214>)
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 fdc1 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff f86f 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0x3a);
 80016de:	203a      	movs	r0, #58	; 0x3a
 80016e0:	f7ff f85f 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", second_set);
 80016e4:	4b6e      	ldr	r3, [pc, #440]	; (80018a0 <Set_Alarm+0x21c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	496a      	ldr	r1, [pc, #424]	; (8001898 <Set_Alarm+0x214>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fdb2 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f860 	bl	80007bc <HD44780_PrintStr>
	HD44780_SetCursor(cursor_col, cursor_row);
 80016fc:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <Set_Alarm+0x220>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4a69      	ldr	r2, [pc, #420]	; (80018a8 <Set_Alarm+0x224>)
 8001702:	7812      	ldrb	r2, [r2, #0]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff98 	bl	800063c <HD44780_SetCursor>
	HD44780_Blink();
 800170c:	f7ff f80a 	bl	8000724 <HD44780_Blink>

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 8001710:	2120      	movs	r1, #32
 8001712:	4866      	ldr	r0, [pc, #408]	; (80018ac <Set_Alarm+0x228>)
 8001714:	f000 fce2 	bl	80020dc <HAL_GPIO_ReadPin>
 8001718:	4603      	mov	r3, r0
 800171a:	2b01      	cmp	r3, #1
 800171c:	d13c      	bne.n	8001798 <Set_Alarm+0x114>
		HAL_Delay(100);
 800171e:	2064      	movs	r0, #100	; 0x64
 8001720:	f000 fa26 	bl	8001b70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 8001724:	2120      	movs	r1, #32
 8001726:	4861      	ldr	r0, [pc, #388]	; (80018ac <Set_Alarm+0x228>)
 8001728:	f000 fcd8 	bl	80020dc <HAL_GPIO_ReadPin>
 800172c:	4603      	mov	r3, r0
 800172e:	2b01      	cmp	r3, #1
 8001730:	d132      	bne.n	8001798 <Set_Alarm+0x114>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1);
 8001732:	bf00      	nop
 8001734:	2120      	movs	r1, #32
 8001736:	485d      	ldr	r0, [pc, #372]	; (80018ac <Set_Alarm+0x228>)
 8001738:	f000 fcd0 	bl	80020dc <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	d0f8      	beq.n	8001734 <Set_Alarm+0xb0>
			flag2++;
 8001742:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <Set_Alarm+0x22c>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <Set_Alarm+0x22c>)
 800174c:	701a      	strb	r2, [r3, #0]
			if(flag2 > 3)flag2 = 1;
 800174e:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <Set_Alarm+0x22c>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d902      	bls.n	800175c <Set_Alarm+0xd8>
 8001756:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <Set_Alarm+0x22c>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
			if(flag2 == 1){
 800175c:	4b54      	ldr	r3, [pc, #336]	; (80018b0 <Set_Alarm+0x22c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <Set_Alarm+0xec>
				cursor_row = 1;
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <Set_Alarm+0x224>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
				cursor_col = 5;
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <Set_Alarm+0x220>)
 800176c:	2205      	movs	r2, #5
 800176e:	701a      	strb	r2, [r3, #0]
			}
			if(flag2 == 2){
 8001770:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <Set_Alarm+0x22c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d105      	bne.n	8001784 <Set_Alarm+0x100>
				cursor_row = 1;
 8001778:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <Set_Alarm+0x224>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
				cursor_col = 3;
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <Set_Alarm+0x220>)
 8001780:	2203      	movs	r2, #3
 8001782:	701a      	strb	r2, [r3, #0]
			}
			if(flag2 == 3){
 8001784:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <Set_Alarm+0x22c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d105      	bne.n	8001798 <Set_Alarm+0x114>
				cursor_row = 1;
 800178c:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <Set_Alarm+0x224>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
				cursor_col = 1;
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <Set_Alarm+0x220>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
			}

		}
	}

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1){
 8001798:	2101      	movs	r1, #1
 800179a:	4846      	ldr	r0, [pc, #280]	; (80018b4 <Set_Alarm+0x230>)
 800179c:	f000 fc9e 	bl	80020dc <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d144      	bne.n	8001830 <Set_Alarm+0x1ac>
		HAL_Delay(100);
 80017a6:	2064      	movs	r0, #100	; 0x64
 80017a8:	f000 f9e2 	bl	8001b70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1){
 80017ac:	2101      	movs	r1, #1
 80017ae:	4841      	ldr	r0, [pc, #260]	; (80018b4 <Set_Alarm+0x230>)
 80017b0:	f000 fc94 	bl	80020dc <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d13a      	bne.n	8001830 <Set_Alarm+0x1ac>
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1);
 80017ba:	bf00      	nop
 80017bc:	2101      	movs	r1, #1
 80017be:	483d      	ldr	r0, [pc, #244]	; (80018b4 <Set_Alarm+0x230>)
 80017c0:	f000 fc8c 	bl	80020dc <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d0f8      	beq.n	80017bc <Set_Alarm+0x138>
			if(flag2 == 1){
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <Set_Alarm+0x22c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d10c      	bne.n	80017ec <Set_Alarm+0x168>
				second_set++;
 80017d2:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <Set_Alarm+0x21c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <Set_Alarm+0x21c>)
 80017dc:	701a      	strb	r2, [r3, #0]
				if(second_set > 59)second_set = 0;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <Set_Alarm+0x21c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b3b      	cmp	r3, #59	; 0x3b
 80017e4:	d902      	bls.n	80017ec <Set_Alarm+0x168>
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <Set_Alarm+0x21c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
			}
			if(flag2 == 2){
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <Set_Alarm+0x22c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d10c      	bne.n	800180e <Set_Alarm+0x18a>
				minute_set++;
 80017f4:	4b29      	ldr	r3, [pc, #164]	; (800189c <Set_Alarm+0x218>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <Set_Alarm+0x218>)
 80017fe:	701a      	strb	r2, [r3, #0]
				if(minute_set > 59)minute_set = 0;
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <Set_Alarm+0x218>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b3b      	cmp	r3, #59	; 0x3b
 8001806:	d902      	bls.n	800180e <Set_Alarm+0x18a>
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <Set_Alarm+0x218>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
			}
			if(flag2 == 3){
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <Set_Alarm+0x22c>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d10c      	bne.n	8001830 <Set_Alarm+0x1ac>
				hour_set++;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <Set_Alarm+0x210>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <Set_Alarm+0x210>)
 8001820:	701a      	strb	r2, [r3, #0]
				if(hour_set > 23)hour_set = 0;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <Set_Alarm+0x210>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b17      	cmp	r3, #23
 8001828:	d902      	bls.n	8001830 <Set_Alarm+0x1ac>
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <Set_Alarm+0x210>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 8001830:	2120      	movs	r1, #32
 8001832:	481e      	ldr	r0, [pc, #120]	; (80018ac <Set_Alarm+0x228>)
 8001834:	f000 fc52 	bl	80020dc <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d117      	bne.n	800186e <Set_Alarm+0x1ea>
		HAL_Delay(100);
 800183e:	2064      	movs	r0, #100	; 0x64
 8001840:	f000 f996 	bl	8001b70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 8001844:	2120      	movs	r1, #32
 8001846:	4819      	ldr	r0, [pc, #100]	; (80018ac <Set_Alarm+0x228>)
 8001848:	f000 fc48 	bl	80020dc <HAL_GPIO_ReadPin>
 800184c:	4603      	mov	r3, r0
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10d      	bne.n	800186e <Set_Alarm+0x1ea>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1);
 8001852:	bf00      	nop
 8001854:	2120      	movs	r1, #32
 8001856:	4815      	ldr	r0, [pc, #84]	; (80018ac <Set_Alarm+0x228>)
 8001858:	f000 fc40 	bl	80020dc <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d0f8      	beq.n	8001854 <Set_Alarm+0x1d0>
			Alarm_flag = 1;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <Set_Alarm+0x234>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
			mode = 0;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <Set_Alarm+0x238>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(flag == 1){
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <Set_Alarm+0x23c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d108      	bne.n	8001888 <Set_Alarm+0x204>
		flag = 0;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <Set_Alarm+0x23c>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
		Alarm_flag = 1;
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <Set_Alarm+0x234>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
		mode = 0;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <Set_Alarm+0x238>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
	}


}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	08004bb4 	.word	0x08004bb4
 8001894:	200001be 	.word	0x200001be
 8001898:	08004b90 	.word	0x08004b90
 800189c:	200001bf 	.word	0x200001bf
 80018a0:	200001c0 	.word	0x200001c0
 80018a4:	20000015 	.word	0x20000015
 80018a8:	20000014 	.word	0x20000014
 80018ac:	40010800 	.word	0x40010800
 80018b0:	200001ae 	.word	0x200001ae
 80018b4:	40010c00 	.word	0x40010c00
 80018b8:	200001c2 	.word	0x200001c2
 80018bc:	200001a4 	.word	0x200001a4
 80018c0:	200001ac 	.word	0x200001ac

080018c4 <Stop_Watch>:

//mode:3
void Stop_Watch(){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
	char str[10];
	HD44780_Clear();
 80018ca:	f7fe fea1 	bl	8000610 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7fe feb3 	bl	800063c <HD44780_SetCursor>
	HD44780_PrintStr("STOP WATCH");
 80018d6:	4855      	ldr	r0, [pc, #340]	; (8001a2c <Stop_Watch+0x168>)
 80018d8:	f7fe ff70 	bl	80007bc <HD44780_PrintStr>

	HD44780_SetCursor(0, 1);
 80018dc:	2101      	movs	r1, #1
 80018de:	2000      	movs	r0, #0
 80018e0:	f7fe feac 	bl	800063c <HD44780_SetCursor>
	sprintf(str, "%d", hour_3);
 80018e4:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <Stop_Watch+0x16c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4951      	ldr	r1, [pc, #324]	; (8001a34 <Stop_Watch+0x170>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 fcb2 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe ff60 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0x3a);
 80018fc:	203a      	movs	r0, #58	; 0x3a
 80018fe:	f7fe ff50 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", minute_3);
 8001902:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <Stop_Watch+0x174>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	494a      	ldr	r1, [pc, #296]	; (8001a34 <Stop_Watch+0x170>)
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fca3 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe ff51 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0x3a);
 800191a:	203a      	movs	r0, #58	; 0x3a
 800191c:	f7fe ff41 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%d", second_3);
 8001920:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <Stop_Watch+0x178>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4942      	ldr	r1, [pc, #264]	; (8001a34 <Stop_Watch+0x170>)
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fc94 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe ff42 	bl	80007bc <HD44780_PrintStr>
	HD44780_PrintSpecialChar(46);
 8001938:	202e      	movs	r0, #46	; 0x2e
 800193a:	f7fe ff32 	bl	80007a2 <HD44780_PrintSpecialChar>
	sprintf(str, "%ld", tick);
 800193e:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <Stop_Watch+0x17c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	493f      	ldr	r1, [pc, #252]	; (8001a44 <Stop_Watch+0x180>)
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fc86 	bl	8004258 <siprintf>
	HD44780_PrintStr(str);
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe ff34 	bl	80007bc <HD44780_PrintStr>
	HD44780_NoCursor();
 8001954:	f7fe feba 	bl	80006cc <HD44780_NoCursor>

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1){
 8001958:	2101      	movs	r1, #1
 800195a:	483b      	ldr	r0, [pc, #236]	; (8001a48 <Stop_Watch+0x184>)
 800195c:	f000 fbbe 	bl	80020dc <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b01      	cmp	r3, #1
 8001964:	d12b      	bne.n	80019be <Stop_Watch+0xfa>
		HAL_Delay(100);
 8001966:	2064      	movs	r0, #100	; 0x64
 8001968:	f000 f902 	bl	8001b70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1){
 800196c:	2101      	movs	r1, #1
 800196e:	4836      	ldr	r0, [pc, #216]	; (8001a48 <Stop_Watch+0x184>)
 8001970:	f000 fbb4 	bl	80020dc <HAL_GPIO_ReadPin>
 8001974:	4603      	mov	r3, r0
 8001976:	2b01      	cmp	r3, #1
 8001978:	d121      	bne.n	80019be <Stop_Watch+0xfa>
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1);
 800197a:	bf00      	nop
 800197c:	2101      	movs	r1, #1
 800197e:	4832      	ldr	r0, [pc, #200]	; (8001a48 <Stop_Watch+0x184>)
 8001980:	f000 fbac 	bl	80020dc <HAL_GPIO_ReadPin>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d0f8      	beq.n	800197c <Stop_Watch+0xb8>
			flag3 = ~flag3;
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <Stop_Watch+0x188>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	43db      	mvns	r3, r3
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <Stop_Watch+0x188>)
 8001994:	701a      	strb	r2, [r3, #0]
			if(flag3 != 0){
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <Stop_Watch+0x188>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d008      	beq.n	80019b0 <Stop_Watch+0xec>
				HAL_TIM_Base_Start_IT(&htim1);
 800199e:	482c      	ldr	r0, [pc, #176]	; (8001a50 <Stop_Watch+0x18c>)
 80019a0:	f002 f84c 	bl	8003a3c <HAL_TIM_Base_Start_IT>
				tick = __HAL_TIM_GET_COUNTER(&htim1);
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <Stop_Watch+0x18c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <Stop_Watch+0x17c>)
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e006      	b.n	80019be <Stop_Watch+0xfa>
			}
			else if(flag3 == 0){
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <Stop_Watch+0x188>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <Stop_Watch+0xfa>
				HAL_TIM_Base_Stop_IT(&htim1);
 80019b8:	4825      	ldr	r0, [pc, #148]	; (8001a50 <Stop_Watch+0x18c>)
 80019ba:	f002 f891 	bl	8003ae0 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 80019be:	2120      	movs	r1, #32
 80019c0:	4824      	ldr	r0, [pc, #144]	; (8001a54 <Stop_Watch+0x190>)
 80019c2:	f000 fb8b 	bl	80020dc <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d114      	bne.n	80019f6 <Stop_Watch+0x132>
		HAL_Delay(100);
 80019cc:	2064      	movs	r0, #100	; 0x64
 80019ce:	f000 f8cf 	bl	8001b70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){
 80019d2:	2120      	movs	r1, #32
 80019d4:	481f      	ldr	r0, [pc, #124]	; (8001a54 <Stop_Watch+0x190>)
 80019d6:	f000 fb81 	bl	80020dc <HAL_GPIO_ReadPin>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10a      	bne.n	80019f6 <Stop_Watch+0x132>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1);
 80019e0:	bf00      	nop
 80019e2:	2120      	movs	r1, #32
 80019e4:	481b      	ldr	r0, [pc, #108]	; (8001a54 <Stop_Watch+0x190>)
 80019e6:	f000 fb79 	bl	80020dc <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d0f8      	beq.n	80019e2 <Stop_Watch+0x11e>
			mode = 0;
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <Stop_Watch+0x194>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(flag == 1){
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <Stop_Watch+0x198>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d112      	bne.n	8001a24 <Stop_Watch+0x160>
		hour_3 = 0;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <Stop_Watch+0x16c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
		minute_3 = 0;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <Stop_Watch+0x174>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
		second_3 = 0;
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <Stop_Watch+0x178>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
		tick = 0;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <Stop_Watch+0x17c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <Stop_Watch+0x18c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
		flag = 0;
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <Stop_Watch+0x198>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
	}

}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	08004bc0 	.word	0x08004bc0
 8001a30:	200001c3 	.word	0x200001c3
 8001a34:	08004b90 	.word	0x08004b90
 8001a38:	200001c4 	.word	0x200001c4
 8001a3c:	200001c5 	.word	0x200001c5
 8001a40:	200001b4 	.word	0x200001b4
 8001a44:	08004bb0 	.word	0x08004bb0
 8001a48:	40010c00 	.word	0x40010c00
 8001a4c:	200001af 	.word	0x200001af
 8001a50:	2000015c 	.word	0x2000015c
 8001a54:	40010800 	.word	0x40010800
 8001a58:	200001a4 	.word	0x200001a4
 8001a5c:	200001ac 	.word	0x200001ac

08001a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a60:	f7ff faa0 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a66:	490c      	ldr	r1, [pc, #48]	; (8001a98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a7c:	4c09      	ldr	r4, [pc, #36]	; (8001aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f002 fbb9 	bl	8004200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8e:	f7fe ff99 	bl	80009c4 <main>
  bx lr
 8001a92:	4770      	bx	lr
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001a9c:	08004c34 	.word	0x08004c34
  ldr r2, =_sbss
 8001aa0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001aa4:	200001dc 	.word	0x200001dc

08001aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC1_2_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_Init+0x28>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_Init+0x28>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f947 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff f932 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f95f 	bl	8001dba <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 f927 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000010 	.word	0x20000010
 8001b30:	20000024 	.word	0x20000024
 8001b34:	20000020 	.word	0x20000020

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_IncTick+0x1c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_IncTick+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <HAL_IncTick+0x20>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000024 	.word	0x20000024
 8001b58:	200001c8 	.word	0x200001c8

08001b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <HAL_GetTick+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	200001c8 	.word	0x200001c8

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffe0 	bl	8001b5c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000024 	.word	0x20000024

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4906      	ldr	r1, [pc, #24]	; (8001c50 <__NVIC_EnableIRQ+0x34>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff90 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff2d 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff42 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff90 	bl	8001ca8 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5f 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff35 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e169      	b.n	80020bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de8:	2201      	movs	r2, #1
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8158 	bne.w	80020b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a9a      	ldr	r2, [pc, #616]	; (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d05e      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e10:	4a98      	ldr	r2, [pc, #608]	; (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d875      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e16:	4a98      	ldr	r2, [pc, #608]	; (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d058      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e1c:	4a96      	ldr	r2, [pc, #600]	; (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d86f      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e22:	4a96      	ldr	r2, [pc, #600]	; (800207c <HAL_GPIO_Init+0x2a8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d052      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e28:	4a94      	ldr	r2, [pc, #592]	; (800207c <HAL_GPIO_Init+0x2a8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d869      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a94      	ldr	r2, [pc, #592]	; (8002080 <HAL_GPIO_Init+0x2ac>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d04c      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e34:	4a92      	ldr	r2, [pc, #584]	; (8002080 <HAL_GPIO_Init+0x2ac>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d863      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e3a:	4a92      	ldr	r2, [pc, #584]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d046      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e40:	4a90      	ldr	r2, [pc, #576]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d85d      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d82a      	bhi.n	8001ea0 <HAL_GPIO_Init+0xcc>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d859      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <HAL_GPIO_Init+0x80>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001ecf 	.word	0x08001ecf
 8001e58:	08001ea9 	.word	0x08001ea9
 8001e5c:	08001ebb 	.word	0x08001ebb
 8001e60:	08001efd 	.word	0x08001efd
 8001e64:	08001f03 	.word	0x08001f03
 8001e68:	08001f03 	.word	0x08001f03
 8001e6c:	08001f03 	.word	0x08001f03
 8001e70:	08001f03 	.word	0x08001f03
 8001e74:	08001f03 	.word	0x08001f03
 8001e78:	08001f03 	.word	0x08001f03
 8001e7c:	08001f03 	.word	0x08001f03
 8001e80:	08001f03 	.word	0x08001f03
 8001e84:	08001f03 	.word	0x08001f03
 8001e88:	08001f03 	.word	0x08001f03
 8001e8c:	08001f03 	.word	0x08001f03
 8001e90:	08001f03 	.word	0x08001f03
 8001e94:	08001f03 	.word	0x08001f03
 8001e98:	08001eb1 	.word	0x08001eb1
 8001e9c:	08001ec5 	.word	0x08001ec5
 8001ea0:	4a79      	ldr	r2, [pc, #484]	; (8002088 <HAL_GPIO_Init+0x2b4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea6:	e02c      	b.n	8001f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e029      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e024      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e01f      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e01a      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e013      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	611a      	str	r2, [r3, #16]
          break;
 8001eee:	e009      	b.n	8001f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	615a      	str	r2, [r3, #20]
          break;
 8001efa:	e003      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          break;
 8001f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d801      	bhi.n	8001f0e <HAL_GPIO_Init+0x13a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	e001      	b.n	8001f12 <HAL_GPIO_Init+0x13e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d802      	bhi.n	8001f20 <HAL_GPIO_Init+0x14c>
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x152>
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	3b08      	subs	r3, #8
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	6a39      	ldr	r1, [r7, #32]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80b1 	beq.w	80020b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_GPIO_Init+0x2b8>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a4c      	ldr	r2, [pc, #304]	; (800208c <HAL_GPIO_Init+0x2b8>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_GPIO_Init+0x2b8>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f6c:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_GPIO_Init+0x2bc>)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a40      	ldr	r2, [pc, #256]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d013      	beq.n	8001fc0 <HAL_GPIO_Init+0x1ec>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3f      	ldr	r2, [pc, #252]	; (8002098 <HAL_GPIO_Init+0x2c4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00d      	beq.n	8001fbc <HAL_GPIO_Init+0x1e8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3e      	ldr	r2, [pc, #248]	; (800209c <HAL_GPIO_Init+0x2c8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <HAL_GPIO_Init+0x1e4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3d      	ldr	r2, [pc, #244]	; (80020a0 <HAL_GPIO_Init+0x2cc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_GPIO_Init+0x1e0>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	e004      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fd2:	492f      	ldr	r1, [pc, #188]	; (8002090 <HAL_GPIO_Init+0x2bc>)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	492c      	ldr	r1, [pc, #176]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	4928      	ldr	r1, [pc, #160]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002014:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	4922      	ldr	r1, [pc, #136]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	491e      	ldr	r1, [pc, #120]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4918      	ldr	r1, [pc, #96]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	43db      	mvns	r3, r3
 8002052:	4914      	ldr	r1, [pc, #80]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002054:	4013      	ands	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d021      	beq.n	80020a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	490e      	ldr	r1, [pc, #56]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e021      	b.n	80020b6 <HAL_GPIO_Init+0x2e2>
 8002072:	bf00      	nop
 8002074:	10320000 	.word	0x10320000
 8002078:	10310000 	.word	0x10310000
 800207c:	10220000 	.word	0x10220000
 8002080:	10210000 	.word	0x10210000
 8002084:	10120000 	.word	0x10120000
 8002088:	10110000 	.word	0x10110000
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	40010800 	.word	0x40010800
 8002098:	40010c00 	.word	0x40010c00
 800209c:	40011000 	.word	0x40011000
 80020a0:	40011400 	.word	0x40011400
 80020a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_GPIO_Init+0x304>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	4909      	ldr	r1, [pc, #36]	; (80020d8 <HAL_GPIO_Init+0x304>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	3301      	adds	r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f47f ae8e 	bne.w	8001de8 <HAL_GPIO_Init+0x14>
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	372c      	adds	r7, #44	; 0x2c
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e001      	b.n	80020fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
	...

0800210c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe ff40 	bl	8000fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40010400 	.word	0x40010400

0800213c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e12b      	b.n	80023a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe fe16 	bl	8000d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800218e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a0:	f001 fbca 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 80021a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a81      	ldr	r2, [pc, #516]	; (80023b0 <HAL_I2C_Init+0x274>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d807      	bhi.n	80021c0 <HAL_I2C_Init+0x84>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a80      	ldr	r2, [pc, #512]	; (80023b4 <HAL_I2C_Init+0x278>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e006      	b.n	80021ce <HAL_I2C_Init+0x92>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a7d      	ldr	r2, [pc, #500]	; (80023b8 <HAL_I2C_Init+0x27c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bf94      	ite	ls
 80021c8:	2301      	movls	r3, #1
 80021ca:	2300      	movhi	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0e7      	b.n	80023a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a78      	ldr	r2, [pc, #480]	; (80023bc <HAL_I2C_Init+0x280>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0c9b      	lsrs	r3, r3, #18
 80021e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a6a      	ldr	r2, [pc, #424]	; (80023b0 <HAL_I2C_Init+0x274>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d802      	bhi.n	8002210 <HAL_I2C_Init+0xd4>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3301      	adds	r3, #1
 800220e:	e009      	b.n	8002224 <HAL_I2C_Init+0xe8>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4a69      	ldr	r2, [pc, #420]	; (80023c0 <HAL_I2C_Init+0x284>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	3301      	adds	r3, #1
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	430b      	orrs	r3, r1
 800222a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	495c      	ldr	r1, [pc, #368]	; (80023b0 <HAL_I2C_Init+0x274>)
 8002240:	428b      	cmp	r3, r1
 8002242:	d819      	bhi.n	8002278 <HAL_I2C_Init+0x13c>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e59      	subs	r1, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002252:	1c59      	adds	r1, r3, #1
 8002254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002258:	400b      	ands	r3, r1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_I2C_Init+0x138>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1e59      	subs	r1, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fbb1 f3f3 	udiv	r3, r1, r3
 800226c:	3301      	adds	r3, #1
 800226e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002272:	e051      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 8002274:	2304      	movs	r3, #4
 8002276:	e04f      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d111      	bne.n	80022a4 <HAL_I2C_Init+0x168>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e58      	subs	r0, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	440b      	add	r3, r1
 800228e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002292:	3301      	adds	r3, #1
 8002294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	e012      	b.n	80022ca <HAL_I2C_Init+0x18e>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	0099      	lsls	r1, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Init+0x196>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e022      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10e      	bne.n	80022f8 <HAL_I2C_Init+0x1bc>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e58      	subs	r0, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	440b      	add	r3, r1
 80022e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f6:	e00f      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	0099      	lsls	r1, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	6809      	ldr	r1, [r1, #0]
 800231c:	4313      	orrs	r3, r2
 800231e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6911      	ldr	r1, [r2, #16]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68d2      	ldr	r2, [r2, #12]
 8002352:	4311      	orrs	r1, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	000186a0 	.word	0x000186a0
 80023b4:	001e847f 	.word	0x001e847f
 80023b8:	003d08ff 	.word	0x003d08ff
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	461a      	mov	r2, r3
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
 80023d4:	4613      	mov	r3, r2
 80023d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff fbc0 	bl	8001b5c <HAL_GetTick>
 80023dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	f040 80e0 	bne.w	80025ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2319      	movs	r3, #25
 80023f2:	2201      	movs	r2, #1
 80023f4:	4970      	ldr	r1, [pc, #448]	; (80025b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fc9e 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	e0d3      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2C_Master_Transmit+0x50>
 8002410:	2302      	movs	r3, #2
 8002412:	e0cc      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d007      	beq.n	800243a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002448:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2221      	movs	r2, #33	; 0x21
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2210      	movs	r2, #16
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	893a      	ldrh	r2, [r7, #8]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a50      	ldr	r2, [pc, #320]	; (80025bc <HAL_I2C_Master_Transmit+0x1f8>)
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800247c:	8979      	ldrh	r1, [r7, #10]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6a3a      	ldr	r2, [r7, #32]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fb08 	bl	8002a98 <I2C_MasterRequestWrite>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e08d      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024a8:	e066      	b.n	8002578 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	6a39      	ldr	r1, [r7, #32]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fd5c 	bl	8002f6c <I2C_WaitOnTXEFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d107      	bne.n	80024d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b04      	cmp	r3, #4
 8002512:	d11b      	bne.n	800254c <HAL_I2C_Master_Transmit+0x188>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d017      	beq.n	800254c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	6a39      	ldr	r1, [r7, #32]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fd53 	bl	8002ffc <I2C_WaitOnBTFFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2b04      	cmp	r3, #4
 8002562:	d107      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e01a      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	2b00      	cmp	r3, #0
 800257e:	d194      	bne.n	80024aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	00100002 	.word	0x00100002
 80025bc:	ffff0000 	.word	0xffff0000

080025c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	461a      	mov	r2, r3
 80025cc:	460b      	mov	r3, r1
 80025ce:	817b      	strh	r3, [r7, #10]
 80025d0:	4613      	mov	r3, r2
 80025d2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff fac0 	bl	8001b5c <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	f040 824b 	bne.w	8002a82 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2319      	movs	r3, #25
 80025f2:	2201      	movs	r2, #1
 80025f4:	497f      	ldr	r1, [pc, #508]	; (80027f4 <HAL_I2C_Master_Receive+0x234>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fb9e 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	e23e      	b.n	8002a84 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_I2C_Master_Receive+0x54>
 8002610:	2302      	movs	r3, #2
 8002612:	e237      	b.n	8002a84 <HAL_I2C_Master_Receive+0x4c4>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d007      	beq.n	800263a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002648:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2222      	movs	r2, #34	; 0x22
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2210      	movs	r2, #16
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	893a      	ldrh	r2, [r7, #8]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a5f      	ldr	r2, [pc, #380]	; (80027f8 <HAL_I2C_Master_Receive+0x238>)
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa8a 	bl	8002b9c <I2C_MasterRequestRead>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1f8      	b.n	8002a84 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	2b00      	cmp	r3, #0
 8002698:	d113      	bne.n	80026c2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e1cc      	b.n	8002a5c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d11e      	bne.n	8002708 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026da:	b672      	cpsid	i
}
 80026dc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002702:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002704:	b662      	cpsie	i
}
 8002706:	e035      	b.n	8002774 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	2b02      	cmp	r3, #2
 800270e:	d11e      	bne.n	800274e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800274a:	b662      	cpsie	i
}
 800274c:	e012      	b.n	8002774 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800275c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002774:	e172      	b.n	8002a5c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	2b03      	cmp	r3, #3
 800277c:	f200 811f 	bhi.w	80029be <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b01      	cmp	r3, #1
 8002786:	d123      	bne.n	80027d0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fc7d 	bl	800308c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e173      	b.n	8002a84 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ce:	e145      	b.n	8002a5c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d152      	bne.n	800287e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	2200      	movs	r2, #0
 80027e0:	4906      	ldr	r1, [pc, #24]	; (80027fc <HAL_I2C_Master_Receive+0x23c>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 faa8 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e148      	b.n	8002a84 <HAL_I2C_Master_Receive+0x4c4>
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000
 80027fc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
}
 8002802:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002846:	b662      	cpsie	i
}
 8002848:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800287c:	e0ee      	b.n	8002a5c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	2200      	movs	r2, #0
 8002886:	4981      	ldr	r1, [pc, #516]	; (8002a8c <HAL_I2C_Master_Receive+0x4cc>)
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fa55 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0f5      	b.n	8002a84 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028a8:	b672      	cpsid	i
}
 80028aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80028de:	4b6c      	ldr	r3, [pc, #432]	; (8002a90 <HAL_I2C_Master_Receive+0x4d0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	08db      	lsrs	r3, r3, #3
 80028e4:	4a6b      	ldr	r2, [pc, #428]	; (8002a94 <HAL_I2C_Master_Receive+0x4d4>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0a1a      	lsrs	r2, r3, #8
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00da      	lsls	r2, r3, #3
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d118      	bne.n	8002936 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0220 	orr.w	r2, r3, #32
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002926:	b662      	cpsie	i
}
 8002928:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0a6      	b.n	8002a84 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d1d9      	bne.n	80028f8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002986:	b662      	cpsie	i
}
 8002988:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029bc:	e04e      	b.n	8002a5c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fb62 	bl	800308c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e058      	b.n	8002a84 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d124      	bne.n	8002a5c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a28:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f47f ae88 	bne.w	8002776 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e000      	b.n	8002a84 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
  }
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3728      	adds	r7, #40	; 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	00010004 	.word	0x00010004
 8002a90:	20000010 	.word	0x20000010
 8002a94:	14f8b589 	.word	0x14f8b589

08002a98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d006      	beq.n	8002ac2 <I2C_MasterRequestWrite+0x2a>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d003      	beq.n	8002ac2 <I2C_MasterRequestWrite+0x2a>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ac0:	d108      	bne.n	8002ad4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e00b      	b.n	8002aec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	2b12      	cmp	r3, #18
 8002ada:	d107      	bne.n	8002aec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f91d 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b12:	d103      	bne.n	8002b1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e035      	b.n	8002b8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b28:	d108      	bne.n	8002b3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b2a:	897b      	ldrh	r3, [r7, #10]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b38:	611a      	str	r2, [r3, #16]
 8002b3a:	e01b      	b.n	8002b74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b3c:	897b      	ldrh	r3, [r7, #10]
 8002b3e:	11db      	asrs	r3, r3, #7
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f003 0306 	and.w	r3, r3, #6
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f063 030f 	orn	r3, r3, #15
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	490e      	ldr	r1, [pc, #56]	; (8002b94 <I2C_MasterRequestWrite+0xfc>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f966 	bl	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e010      	b.n	8002b8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4907      	ldr	r1, [pc, #28]	; (8002b98 <I2C_MasterRequestWrite+0x100>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f956 	bl	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	00010008 	.word	0x00010008
 8002b98:	00010002 	.word	0x00010002

08002b9c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d006      	beq.n	8002bd6 <I2C_MasterRequestRead+0x3a>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d003      	beq.n	8002bd6 <I2C_MasterRequestRead+0x3a>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bd4:	d108      	bne.n	8002be8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e00b      	b.n	8002c00 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	2b11      	cmp	r3, #17
 8002bee:	d107      	bne.n	8002c00 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f893 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c26:	d103      	bne.n	8002c30 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e079      	b.n	8002d28 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3c:	d108      	bne.n	8002c50 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c3e:	897b      	ldrh	r3, [r7, #10]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	e05f      	b.n	8002d10 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c50:	897b      	ldrh	r3, [r7, #10]
 8002c52:	11db      	asrs	r3, r3, #7
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f003 0306 	and.w	r3, r3, #6
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f063 030f 	orn	r3, r3, #15
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4930      	ldr	r1, [pc, #192]	; (8002d30 <I2C_MasterRequestRead+0x194>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f8dc 	bl	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e054      	b.n	8002d28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4929      	ldr	r1, [pc, #164]	; (8002d34 <I2C_MasterRequestRead+0x198>)
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f8cc 	bl	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e044      	b.n	8002d28 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f831 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cea:	d103      	bne.n	8002cf4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e017      	b.n	8002d28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002cf8:	897b      	ldrh	r3, [r7, #10]
 8002cfa:	11db      	asrs	r3, r3, #7
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f003 0306 	and.w	r3, r3, #6
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f063 030e 	orn	r3, r3, #14
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4907      	ldr	r1, [pc, #28]	; (8002d34 <I2C_MasterRequestRead+0x198>)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f888 	bl	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	00010008 	.word	0x00010008
 8002d34:	00010002 	.word	0x00010002

08002d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d48:	e048      	b.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d044      	beq.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fe ff03 	bl	8001b5c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d139      	bne.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d10d      	bne.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	e00c      	b.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	43da      	mvns	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d116      	bne.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e023      	b.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	0c1b      	lsrs	r3, r3, #16
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d10d      	bne.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	43da      	mvns	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4013      	ands	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	e00c      	b.n	8002e1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d093      	beq.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e3a:	e071      	b.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4a:	d123      	bne.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f043 0204 	orr.w	r2, r3, #4
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e067      	b.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d041      	beq.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	f7fe fe5e 	bl	8001b5c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d136      	bne.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10c      	bne.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	e00b      	b.n	8002eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	43da      	mvns	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e021      	b.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d10c      	bne.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	43da      	mvns	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e00b      	b.n	8002f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bf14      	ite	ne
 8002f56:	2301      	movne	r3, #1
 8002f58:	2300      	moveq	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f47f af6d 	bne.w	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f78:	e034      	b.n	8002fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f8e3 	bl	8003146 <I2C_IsAcknowledgeFailed>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e034      	b.n	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d028      	beq.n	8002fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f92:	f7fe fde3 	bl	8001b5c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11d      	bne.n	8002fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb2:	2b80      	cmp	r3, #128	; 0x80
 8002fb4:	d016      	beq.n	8002fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e007      	b.n	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d1c3      	bne.n	8002f7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003008:	e034      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f89b 	bl	8003146 <I2C_IsAcknowledgeFailed>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e034      	b.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d028      	beq.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fe fd9b 	bl	8001b5c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d11d      	bne.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d016      	beq.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f043 0220 	orr.w	r2, r3, #32
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e007      	b.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b04      	cmp	r3, #4
 8003080:	d1c3      	bne.n	800300a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003098:	e049      	b.n	800312e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d119      	bne.n	80030dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0210 	mvn.w	r2, #16
 80030b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e030      	b.n	800313e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030dc:	f7fe fd3e 	bl	8001b5c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d302      	bcc.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11d      	bne.n	800312e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d016      	beq.n	800312e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e007      	b.n	800313e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d1ae      	bne.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	d11b      	bne.n	8003196 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003166:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e272      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8087 	beq.w	80032d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031c4:	4b92      	ldr	r3, [pc, #584]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d00c      	beq.n	80031ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d0:	4b8f      	ldr	r3, [pc, #572]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d112      	bne.n	8003202 <HAL_RCC_OscConfig+0x5e>
 80031dc:	4b8c      	ldr	r3, [pc, #560]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d10b      	bne.n	8003202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ea:	4b89      	ldr	r3, [pc, #548]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d06c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x12c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d168      	bne.n	80032d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e24c      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320a:	d106      	bne.n	800321a <HAL_RCC_OscConfig+0x76>
 800320c:	4b80      	ldr	r3, [pc, #512]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a7f      	ldr	r2, [pc, #508]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	e02e      	b.n	8003278 <HAL_RCC_OscConfig+0xd4>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0x98>
 8003222:	4b7b      	ldr	r3, [pc, #492]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7a      	ldr	r2, [pc, #488]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b78      	ldr	r3, [pc, #480]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a77      	ldr	r2, [pc, #476]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e01d      	b.n	8003278 <HAL_RCC_OscConfig+0xd4>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0xbc>
 8003246:	4b72      	ldr	r3, [pc, #456]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a71      	ldr	r2, [pc, #452]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b6f      	ldr	r3, [pc, #444]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6e      	ldr	r2, [pc, #440]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0xd4>
 8003260:	4b6b      	ldr	r3, [pc, #428]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6a      	ldr	r2, [pc, #424]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b68      	ldr	r3, [pc, #416]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a67      	ldr	r2, [pc, #412]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fc6c 	bl	8001b5c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7fe fc68 	bl	8001b5c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e200      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b5d      	ldr	r3, [pc, #372]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0xe4>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fc58 	bl	8001b5c <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fe fc54 	bl	8001b5c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1ec      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x10c>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d063      	beq.n	80033a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032de:	4b4c      	ldr	r3, [pc, #304]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ea:	4b49      	ldr	r3, [pc, #292]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d11c      	bne.n	8003330 <HAL_RCC_OscConfig+0x18c>
 80032f6:	4b46      	ldr	r3, [pc, #280]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d116      	bne.n	8003330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	4b43      	ldr	r3, [pc, #268]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_RCC_OscConfig+0x176>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e1c0      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331a:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4939      	ldr	r1, [pc, #228]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332e:	e03a      	b.n	80033a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003338:	4b36      	ldr	r3, [pc, #216]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fe fc0d 	bl	8001b5c <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003346:	f7fe fc09 	bl	8001b5c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1a1      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4927      	ldr	r1, [pc, #156]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337a:	4b26      	ldr	r3, [pc, #152]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe fbec 	bl	8001b5c <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003388:	f7fe fbe8 	bl	8001b5c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e180      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d03a      	beq.n	8003428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d019      	beq.n	80033ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fe fbcc 	bl	8001b5c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c8:	f7fe fbc8 	bl	8001b5c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e160      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033e6:	2001      	movs	r0, #1
 80033e8:	f000 faba 	bl	8003960 <RCC_Delay>
 80033ec:	e01c      	b.n	8003428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7fe fbb2 	bl	8001b5c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fa:	e00f      	b.n	800341c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fe fbae 	bl	8001b5c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d908      	bls.n	800341c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e146      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	42420000 	.word	0x42420000
 8003418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	4b92      	ldr	r3, [pc, #584]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e9      	bne.n	80033fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80a6 	beq.w	8003582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343a:	4b8b      	ldr	r3, [pc, #556]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4a87      	ldr	r2, [pc, #540]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003450:	61d3      	str	r3, [r2, #28]
 8003452:	4b85      	ldr	r3, [pc, #532]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b82      	ldr	r3, [pc, #520]	; (800366c <HAL_RCC_OscConfig+0x4c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d118      	bne.n	80034a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346e:	4b7f      	ldr	r3, [pc, #508]	; (800366c <HAL_RCC_OscConfig+0x4c8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7e      	ldr	r2, [pc, #504]	; (800366c <HAL_RCC_OscConfig+0x4c8>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347a:	f7fe fb6f 	bl	8001b5c <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7fe fb6b 	bl	8001b5c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b64      	cmp	r3, #100	; 0x64
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e103      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	4b75      	ldr	r3, [pc, #468]	; (800366c <HAL_RCC_OscConfig+0x4c8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x312>
 80034a8:	4b6f      	ldr	r3, [pc, #444]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a6e      	ldr	r2, [pc, #440]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	e02d      	b.n	8003512 <HAL_RCC_OscConfig+0x36e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x334>
 80034be:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a69      	ldr	r2, [pc, #420]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	4b67      	ldr	r3, [pc, #412]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a66      	ldr	r2, [pc, #408]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	6213      	str	r3, [r2, #32]
 80034d6:	e01c      	b.n	8003512 <HAL_RCC_OscConfig+0x36e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d10c      	bne.n	80034fa <HAL_RCC_OscConfig+0x356>
 80034e0:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4a60      	ldr	r2, [pc, #384]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	f043 0304 	orr.w	r3, r3, #4
 80034ea:	6213      	str	r3, [r2, #32]
 80034ec:	4b5e      	ldr	r3, [pc, #376]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a5d      	ldr	r2, [pc, #372]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6213      	str	r3, [r2, #32]
 80034f8:	e00b      	b.n	8003512 <HAL_RCC_OscConfig+0x36e>
 80034fa:	4b5b      	ldr	r3, [pc, #364]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4a5a      	ldr	r2, [pc, #360]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6213      	str	r3, [r2, #32]
 8003506:	4b58      	ldr	r3, [pc, #352]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4a57      	ldr	r2, [pc, #348]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d015      	beq.n	8003546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351a:	f7fe fb1f 	bl	8001b5c <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fe fb1b 	bl	8001b5c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0b1      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003538:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0ee      	beq.n	8003522 <HAL_RCC_OscConfig+0x37e>
 8003544:	e014      	b.n	8003570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003546:	f7fe fb09 	bl	8001b5c <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fe fb05 	bl	8001b5c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e09b      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003564:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ee      	bne.n	800354e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d105      	bne.n	8003582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003576:	4b3c      	ldr	r3, [pc, #240]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	4a3b      	ldr	r2, [pc, #236]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8087 	beq.w	800369a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358c:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d061      	beq.n	800365c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d146      	bne.n	800362e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a0:	4b33      	ldr	r3, [pc, #204]	; (8003670 <HAL_RCC_OscConfig+0x4cc>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fe fad9 	bl	8001b5c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fe fad5 	bl	8001b5c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e06d      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d108      	bne.n	80035e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	4921      	ldr	r1, [pc, #132]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e8:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a19      	ldr	r1, [r3, #32]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	430b      	orrs	r3, r1
 80035fa:	491b      	ldr	r1, [pc, #108]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_RCC_OscConfig+0x4cc>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe faa9 	bl	8001b5c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe faa5 	bl	8001b5c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e03d      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x46a>
 800362c:	e035      	b.n	800369a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <HAL_RCC_OscConfig+0x4cc>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe fa92 	bl	8001b5c <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fe fa8e 	bl	8001b5c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e026      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x498>
 800365a:	e01e      	b.n	800369a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e019      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
 8003670:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCC_OscConfig+0x500>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	429a      	cmp	r2, r3
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0d0      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036bc:	4b6a      	ldr	r3, [pc, #424]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d910      	bls.n	80036ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b67      	ldr	r3, [pc, #412]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 0207 	bic.w	r2, r3, #7
 80036d2:	4965      	ldr	r1, [pc, #404]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b63      	ldr	r3, [pc, #396]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b8      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a58      	ldr	r2, [pc, #352]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800370e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800371c:	4b53      	ldr	r3, [pc, #332]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4a52      	ldr	r2, [pc, #328]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b50      	ldr	r3, [pc, #320]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	494d      	ldr	r1, [pc, #308]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d040      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d115      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e07f      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003766:	4b41      	ldr	r3, [pc, #260]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e073      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	4b3d      	ldr	r3, [pc, #244]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e06b      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b39      	ldr	r3, [pc, #228]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4936      	ldr	r1, [pc, #216]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003798:	f7fe f9e0 	bl	8001b5c <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fe f9dc 	bl	8001b5c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e053      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b2d      	ldr	r3, [pc, #180]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 020c 	and.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1eb      	bne.n	80037a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b27      	ldr	r3, [pc, #156]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d210      	bcs.n	80037f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	4922      	ldr	r1, [pc, #136]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e032      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4916      	ldr	r1, [pc, #88]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	490e      	ldr	r1, [pc, #56]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003836:	f000 f821 	bl	800387c <HAL_RCC_GetSysClockFreq>
 800383a:	4602      	mov	r2, r0
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	490a      	ldr	r1, [pc, #40]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	5ccb      	ldrb	r3, [r1, r3]
 800384a:	fa22 f303 	lsr.w	r3, r2, r3
 800384e:	4a09      	ldr	r2, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1cc>)
 8003850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1d0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe f93e 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40022000 	.word	0x40022000
 800386c:	40021000 	.word	0x40021000
 8003870:	08004bcc 	.word	0x08004bcc
 8003874:	20000010 	.word	0x20000010
 8003878:	20000020 	.word	0x20000020

0800387c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <HAL_RCC_GetSysClockFreq+0x94>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x30>
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x36>
 80038aa:	e027      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ae:	613b      	str	r3, [r7, #16]
      break;
 80038b0:	e027      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0c9b      	lsrs	r3, r3, #18
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	4a17      	ldr	r2, [pc, #92]	; (8003918 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d010      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RCC_GetSysClockFreq+0x94>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0c5b      	lsrs	r3, r3, #17
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	4a11      	ldr	r2, [pc, #68]	; (800391c <HAL_RCC_GetSysClockFreq+0xa0>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a0d      	ldr	r2, [pc, #52]	; (8003914 <HAL_RCC_GetSysClockFreq+0x98>)
 80038de:	fb03 f202 	mul.w	r2, r3, r2
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e004      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038f0:	fb02 f303 	mul.w	r3, r2, r3
 80038f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	613b      	str	r3, [r7, #16]
      break;
 80038fa:	e002      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCC_GetSysClockFreq+0x98>)
 80038fe:	613b      	str	r3, [r7, #16]
      break;
 8003900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003902:	693b      	ldr	r3, [r7, #16]
}
 8003904:	4618      	mov	r0, r3
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	007a1200 	.word	0x007a1200
 8003918:	08004be4 	.word	0x08004be4
 800391c:	08004bf4 	.word	0x08004bf4
 8003920:	003d0900 	.word	0x003d0900

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <HAL_RCC_GetHCLKFreq+0x10>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	20000010 	.word	0x20000010

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff2 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	08004bdc 	.word	0x08004bdc

08003960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <RCC_Delay+0x34>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <RCC_Delay+0x38>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0a5b      	lsrs	r3, r3, #9
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800397c:	bf00      	nop
  }
  while (Delay --);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	60fa      	str	r2, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f9      	bne.n	800397c <RCC_Delay+0x1c>
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000010 	.word	0x20000010
 8003998:	10624dd3 	.word	0x10624dd3

0800399c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e041      	b.n	8003a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd fa52 	bl	8000e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f000 faa2 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d001      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e03a      	b.n	8003aca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_TIM_Base_Start_IT+0x98>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x58>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d009      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x58>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x58>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <HAL_TIM_Base_Start_IT+0xa0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d111      	bne.n	8003ab8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d010      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	e007      	b.n	8003ac8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800

08003ae0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a1a      	ldr	r2, [r3, #32]
 8003afe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10f      	bne.n	8003b28 <HAL_TIM_Base_Stop_IT+0x48>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a1a      	ldr	r2, [r3, #32]
 8003b0e:	f240 4344 	movw	r3, #1092	; 0x444
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_TIM_Base_Stop_IT+0x48>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0202 	mvn.w	r2, #2
 8003b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9b4 	bl	8003eec <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f9a7 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f9b6 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0204 	mvn.w	r2, #4
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f98a 	bl	8003eec <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f97d 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f98c 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d122      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d11b      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0208 	mvn.w	r2, #8
 8003c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2204      	movs	r2, #4
 8003c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f960 	bl	8003eec <HAL_TIM_IC_CaptureCallback>
 8003c2c:	e005      	b.n	8003c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f953 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f962 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0210 	mvn.w	r2, #16
 8003c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f936 	bl	8003eec <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f929 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f938 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0201 	mvn.w	r2, #1
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd f99c 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cca:	2b80      	cmp	r3, #128	; 0x80
 8003ccc:	d10e      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d107      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa7b 	bl	80041e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f8fc 	bl	8003f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d10e      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d107      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0220 	mvn.w	r2, #32
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fa46 	bl	80041d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x1c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0b4      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x186>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0xd4>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	f000 8086 	beq.w	8003ebe <HAL_TIM_ConfigClockSource+0x172>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b70      	cmp	r3, #112	; 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xa6>
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b60      	cmp	r3, #96	; 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x11a>
 8003dc4:	2b60      	cmp	r3, #96	; 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b50      	cmp	r3, #80	; 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xfa>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x13a>
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 f968 	bl	80040d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04f      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f000 f951 	bl	80040d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 f8c8 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	; 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f91f 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 f8e6 	bl	8004044 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	; 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f90f 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 f8a8 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f8ff 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 f8f6 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
	...

08003f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a29      	ldr	r2, [pc, #164]	; (8003fdc <TIM_Base_SetConfig+0xb8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00b      	beq.n	8003f54 <TIM_Base_SetConfig+0x30>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f42:	d007      	beq.n	8003f54 <TIM_Base_SetConfig+0x30>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a26      	ldr	r2, [pc, #152]	; (8003fe0 <TIM_Base_SetConfig+0xbc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_Base_SetConfig+0x30>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a25      	ldr	r2, [pc, #148]	; (8003fe4 <TIM_Base_SetConfig+0xc0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d108      	bne.n	8003f66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <TIM_Base_SetConfig+0xb8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <TIM_Base_SetConfig+0x62>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f74:	d007      	beq.n	8003f86 <TIM_Base_SetConfig+0x62>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <TIM_Base_SetConfig+0xbc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_Base_SetConfig+0x62>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <TIM_Base_SetConfig+0xc0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d108      	bne.n	8003f98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <TIM_Base_SetConfig+0xb8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d103      	bne.n	8003fcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	615a      	str	r2, [r3, #20]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800

08003fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 030a 	bic.w	r3, r3, #10
 8004024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0210 	bic.w	r2, r3, #16
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800406e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	031b      	lsls	r3, r3, #12
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004080:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	f043 0307 	orr.w	r3, r3, #7
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b087      	sub	sp, #28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	021a      	lsls	r2, r3, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	609a      	str	r2, [r3, #8]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004128:	2302      	movs	r3, #2
 800412a:	e046      	b.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00e      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d009      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a10      	ldr	r2, [pc, #64]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d10c      	bne.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4313      	orrs	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800

080041d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <__errno>:
 80041f4:	4b01      	ldr	r3, [pc, #4]	; (80041fc <__errno+0x8>)
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000028 	.word	0x20000028

08004200 <__libc_init_array>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	2600      	movs	r6, #0
 8004204:	4d0c      	ldr	r5, [pc, #48]	; (8004238 <__libc_init_array+0x38>)
 8004206:	4c0d      	ldr	r4, [pc, #52]	; (800423c <__libc_init_array+0x3c>)
 8004208:	1b64      	subs	r4, r4, r5
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	42a6      	cmp	r6, r4
 800420e:	d109      	bne.n	8004224 <__libc_init_array+0x24>
 8004210:	f000 fc9c 	bl	8004b4c <_init>
 8004214:	2600      	movs	r6, #0
 8004216:	4d0a      	ldr	r5, [pc, #40]	; (8004240 <__libc_init_array+0x40>)
 8004218:	4c0a      	ldr	r4, [pc, #40]	; (8004244 <__libc_init_array+0x44>)
 800421a:	1b64      	subs	r4, r4, r5
 800421c:	10a4      	asrs	r4, r4, #2
 800421e:	42a6      	cmp	r6, r4
 8004220:	d105      	bne.n	800422e <__libc_init_array+0x2e>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	f855 3b04 	ldr.w	r3, [r5], #4
 8004228:	4798      	blx	r3
 800422a:	3601      	adds	r6, #1
 800422c:	e7ee      	b.n	800420c <__libc_init_array+0xc>
 800422e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004232:	4798      	blx	r3
 8004234:	3601      	adds	r6, #1
 8004236:	e7f2      	b.n	800421e <__libc_init_array+0x1e>
 8004238:	08004c2c 	.word	0x08004c2c
 800423c:	08004c2c 	.word	0x08004c2c
 8004240:	08004c2c 	.word	0x08004c2c
 8004244:	08004c30 	.word	0x08004c30

08004248 <memset>:
 8004248:	4603      	mov	r3, r0
 800424a:	4402      	add	r2, r0
 800424c:	4293      	cmp	r3, r2
 800424e:	d100      	bne.n	8004252 <memset+0xa>
 8004250:	4770      	bx	lr
 8004252:	f803 1b01 	strb.w	r1, [r3], #1
 8004256:	e7f9      	b.n	800424c <memset+0x4>

08004258 <siprintf>:
 8004258:	b40e      	push	{r1, r2, r3}
 800425a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800425e:	b500      	push	{lr}
 8004260:	b09c      	sub	sp, #112	; 0x70
 8004262:	ab1d      	add	r3, sp, #116	; 0x74
 8004264:	9002      	str	r0, [sp, #8]
 8004266:	9006      	str	r0, [sp, #24]
 8004268:	9107      	str	r1, [sp, #28]
 800426a:	9104      	str	r1, [sp, #16]
 800426c:	4808      	ldr	r0, [pc, #32]	; (8004290 <siprintf+0x38>)
 800426e:	4909      	ldr	r1, [pc, #36]	; (8004294 <siprintf+0x3c>)
 8004270:	f853 2b04 	ldr.w	r2, [r3], #4
 8004274:	9105      	str	r1, [sp, #20]
 8004276:	6800      	ldr	r0, [r0, #0]
 8004278:	a902      	add	r1, sp, #8
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	f000 f868 	bl	8004350 <_svfiprintf_r>
 8004280:	2200      	movs	r2, #0
 8004282:	9b02      	ldr	r3, [sp, #8]
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	b01c      	add	sp, #112	; 0x70
 8004288:	f85d eb04 	ldr.w	lr, [sp], #4
 800428c:	b003      	add	sp, #12
 800428e:	4770      	bx	lr
 8004290:	20000028 	.word	0x20000028
 8004294:	ffff0208 	.word	0xffff0208

08004298 <__ssputs_r>:
 8004298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800429c:	688e      	ldr	r6, [r1, #8]
 800429e:	4682      	mov	sl, r0
 80042a0:	429e      	cmp	r6, r3
 80042a2:	460c      	mov	r4, r1
 80042a4:	4690      	mov	r8, r2
 80042a6:	461f      	mov	r7, r3
 80042a8:	d838      	bhi.n	800431c <__ssputs_r+0x84>
 80042aa:	898a      	ldrh	r2, [r1, #12]
 80042ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042b0:	d032      	beq.n	8004318 <__ssputs_r+0x80>
 80042b2:	6825      	ldr	r5, [r4, #0]
 80042b4:	6909      	ldr	r1, [r1, #16]
 80042b6:	3301      	adds	r3, #1
 80042b8:	eba5 0901 	sub.w	r9, r5, r1
 80042bc:	6965      	ldr	r5, [r4, #20]
 80042be:	444b      	add	r3, r9
 80042c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042c8:	106d      	asrs	r5, r5, #1
 80042ca:	429d      	cmp	r5, r3
 80042cc:	bf38      	it	cc
 80042ce:	461d      	movcc	r5, r3
 80042d0:	0553      	lsls	r3, r2, #21
 80042d2:	d531      	bpl.n	8004338 <__ssputs_r+0xa0>
 80042d4:	4629      	mov	r1, r5
 80042d6:	f000 fb6f 	bl	80049b8 <_malloc_r>
 80042da:	4606      	mov	r6, r0
 80042dc:	b950      	cbnz	r0, 80042f4 <__ssputs_r+0x5c>
 80042de:	230c      	movs	r3, #12
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	f8ca 3000 	str.w	r3, [sl]
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f4:	464a      	mov	r2, r9
 80042f6:	6921      	ldr	r1, [r4, #16]
 80042f8:	f000 face 	bl	8004898 <memcpy>
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004306:	81a3      	strh	r3, [r4, #12]
 8004308:	6126      	str	r6, [r4, #16]
 800430a:	444e      	add	r6, r9
 800430c:	6026      	str	r6, [r4, #0]
 800430e:	463e      	mov	r6, r7
 8004310:	6165      	str	r5, [r4, #20]
 8004312:	eba5 0509 	sub.w	r5, r5, r9
 8004316:	60a5      	str	r5, [r4, #8]
 8004318:	42be      	cmp	r6, r7
 800431a:	d900      	bls.n	800431e <__ssputs_r+0x86>
 800431c:	463e      	mov	r6, r7
 800431e:	4632      	mov	r2, r6
 8004320:	4641      	mov	r1, r8
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	f000 fac6 	bl	80048b4 <memmove>
 8004328:	68a3      	ldr	r3, [r4, #8]
 800432a:	2000      	movs	r0, #0
 800432c:	1b9b      	subs	r3, r3, r6
 800432e:	60a3      	str	r3, [r4, #8]
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	4433      	add	r3, r6
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	e7db      	b.n	80042f0 <__ssputs_r+0x58>
 8004338:	462a      	mov	r2, r5
 800433a:	f000 fbb1 	bl	8004aa0 <_realloc_r>
 800433e:	4606      	mov	r6, r0
 8004340:	2800      	cmp	r0, #0
 8004342:	d1e1      	bne.n	8004308 <__ssputs_r+0x70>
 8004344:	4650      	mov	r0, sl
 8004346:	6921      	ldr	r1, [r4, #16]
 8004348:	f000 face 	bl	80048e8 <_free_r>
 800434c:	e7c7      	b.n	80042de <__ssputs_r+0x46>
	...

08004350 <_svfiprintf_r>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	4698      	mov	r8, r3
 8004356:	898b      	ldrh	r3, [r1, #12]
 8004358:	4607      	mov	r7, r0
 800435a:	061b      	lsls	r3, r3, #24
 800435c:	460d      	mov	r5, r1
 800435e:	4614      	mov	r4, r2
 8004360:	b09d      	sub	sp, #116	; 0x74
 8004362:	d50e      	bpl.n	8004382 <_svfiprintf_r+0x32>
 8004364:	690b      	ldr	r3, [r1, #16]
 8004366:	b963      	cbnz	r3, 8004382 <_svfiprintf_r+0x32>
 8004368:	2140      	movs	r1, #64	; 0x40
 800436a:	f000 fb25 	bl	80049b8 <_malloc_r>
 800436e:	6028      	str	r0, [r5, #0]
 8004370:	6128      	str	r0, [r5, #16]
 8004372:	b920      	cbnz	r0, 800437e <_svfiprintf_r+0x2e>
 8004374:	230c      	movs	r3, #12
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	e0d1      	b.n	8004522 <_svfiprintf_r+0x1d2>
 800437e:	2340      	movs	r3, #64	; 0x40
 8004380:	616b      	str	r3, [r5, #20]
 8004382:	2300      	movs	r3, #0
 8004384:	9309      	str	r3, [sp, #36]	; 0x24
 8004386:	2320      	movs	r3, #32
 8004388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800438c:	2330      	movs	r3, #48	; 0x30
 800438e:	f04f 0901 	mov.w	r9, #1
 8004392:	f8cd 800c 	str.w	r8, [sp, #12]
 8004396:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800453c <_svfiprintf_r+0x1ec>
 800439a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800439e:	4623      	mov	r3, r4
 80043a0:	469a      	mov	sl, r3
 80043a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043a6:	b10a      	cbz	r2, 80043ac <_svfiprintf_r+0x5c>
 80043a8:	2a25      	cmp	r2, #37	; 0x25
 80043aa:	d1f9      	bne.n	80043a0 <_svfiprintf_r+0x50>
 80043ac:	ebba 0b04 	subs.w	fp, sl, r4
 80043b0:	d00b      	beq.n	80043ca <_svfiprintf_r+0x7a>
 80043b2:	465b      	mov	r3, fp
 80043b4:	4622      	mov	r2, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	4638      	mov	r0, r7
 80043ba:	f7ff ff6d 	bl	8004298 <__ssputs_r>
 80043be:	3001      	adds	r0, #1
 80043c0:	f000 80aa 	beq.w	8004518 <_svfiprintf_r+0x1c8>
 80043c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043c6:	445a      	add	r2, fp
 80043c8:	9209      	str	r2, [sp, #36]	; 0x24
 80043ca:	f89a 3000 	ldrb.w	r3, [sl]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80a2 	beq.w	8004518 <_svfiprintf_r+0x1c8>
 80043d4:	2300      	movs	r3, #0
 80043d6:	f04f 32ff 	mov.w	r2, #4294967295
 80043da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043de:	f10a 0a01 	add.w	sl, sl, #1
 80043e2:	9304      	str	r3, [sp, #16]
 80043e4:	9307      	str	r3, [sp, #28]
 80043e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ea:	931a      	str	r3, [sp, #104]	; 0x68
 80043ec:	4654      	mov	r4, sl
 80043ee:	2205      	movs	r2, #5
 80043f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f4:	4851      	ldr	r0, [pc, #324]	; (800453c <_svfiprintf_r+0x1ec>)
 80043f6:	f000 fa41 	bl	800487c <memchr>
 80043fa:	9a04      	ldr	r2, [sp, #16]
 80043fc:	b9d8      	cbnz	r0, 8004436 <_svfiprintf_r+0xe6>
 80043fe:	06d0      	lsls	r0, r2, #27
 8004400:	bf44      	itt	mi
 8004402:	2320      	movmi	r3, #32
 8004404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004408:	0711      	lsls	r1, r2, #28
 800440a:	bf44      	itt	mi
 800440c:	232b      	movmi	r3, #43	; 0x2b
 800440e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004412:	f89a 3000 	ldrb.w	r3, [sl]
 8004416:	2b2a      	cmp	r3, #42	; 0x2a
 8004418:	d015      	beq.n	8004446 <_svfiprintf_r+0xf6>
 800441a:	4654      	mov	r4, sl
 800441c:	2000      	movs	r0, #0
 800441e:	f04f 0c0a 	mov.w	ip, #10
 8004422:	9a07      	ldr	r2, [sp, #28]
 8004424:	4621      	mov	r1, r4
 8004426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800442a:	3b30      	subs	r3, #48	; 0x30
 800442c:	2b09      	cmp	r3, #9
 800442e:	d94e      	bls.n	80044ce <_svfiprintf_r+0x17e>
 8004430:	b1b0      	cbz	r0, 8004460 <_svfiprintf_r+0x110>
 8004432:	9207      	str	r2, [sp, #28]
 8004434:	e014      	b.n	8004460 <_svfiprintf_r+0x110>
 8004436:	eba0 0308 	sub.w	r3, r0, r8
 800443a:	fa09 f303 	lsl.w	r3, r9, r3
 800443e:	4313      	orrs	r3, r2
 8004440:	46a2      	mov	sl, r4
 8004442:	9304      	str	r3, [sp, #16]
 8004444:	e7d2      	b.n	80043ec <_svfiprintf_r+0x9c>
 8004446:	9b03      	ldr	r3, [sp, #12]
 8004448:	1d19      	adds	r1, r3, #4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	9103      	str	r1, [sp, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	bfbb      	ittet	lt
 8004452:	425b      	neglt	r3, r3
 8004454:	f042 0202 	orrlt.w	r2, r2, #2
 8004458:	9307      	strge	r3, [sp, #28]
 800445a:	9307      	strlt	r3, [sp, #28]
 800445c:	bfb8      	it	lt
 800445e:	9204      	strlt	r2, [sp, #16]
 8004460:	7823      	ldrb	r3, [r4, #0]
 8004462:	2b2e      	cmp	r3, #46	; 0x2e
 8004464:	d10c      	bne.n	8004480 <_svfiprintf_r+0x130>
 8004466:	7863      	ldrb	r3, [r4, #1]
 8004468:	2b2a      	cmp	r3, #42	; 0x2a
 800446a:	d135      	bne.n	80044d8 <_svfiprintf_r+0x188>
 800446c:	9b03      	ldr	r3, [sp, #12]
 800446e:	3402      	adds	r4, #2
 8004470:	1d1a      	adds	r2, r3, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	9203      	str	r2, [sp, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	bfb8      	it	lt
 800447a:	f04f 33ff 	movlt.w	r3, #4294967295
 800447e:	9305      	str	r3, [sp, #20]
 8004480:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004540 <_svfiprintf_r+0x1f0>
 8004484:	2203      	movs	r2, #3
 8004486:	4650      	mov	r0, sl
 8004488:	7821      	ldrb	r1, [r4, #0]
 800448a:	f000 f9f7 	bl	800487c <memchr>
 800448e:	b140      	cbz	r0, 80044a2 <_svfiprintf_r+0x152>
 8004490:	2340      	movs	r3, #64	; 0x40
 8004492:	eba0 000a 	sub.w	r0, r0, sl
 8004496:	fa03 f000 	lsl.w	r0, r3, r0
 800449a:	9b04      	ldr	r3, [sp, #16]
 800449c:	3401      	adds	r4, #1
 800449e:	4303      	orrs	r3, r0
 80044a0:	9304      	str	r3, [sp, #16]
 80044a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a6:	2206      	movs	r2, #6
 80044a8:	4826      	ldr	r0, [pc, #152]	; (8004544 <_svfiprintf_r+0x1f4>)
 80044aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044ae:	f000 f9e5 	bl	800487c <memchr>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d038      	beq.n	8004528 <_svfiprintf_r+0x1d8>
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <_svfiprintf_r+0x1f8>)
 80044b8:	bb1b      	cbnz	r3, 8004502 <_svfiprintf_r+0x1b2>
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	3307      	adds	r3, #7
 80044be:	f023 0307 	bic.w	r3, r3, #7
 80044c2:	3308      	adds	r3, #8
 80044c4:	9303      	str	r3, [sp, #12]
 80044c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c8:	4433      	add	r3, r6
 80044ca:	9309      	str	r3, [sp, #36]	; 0x24
 80044cc:	e767      	b.n	800439e <_svfiprintf_r+0x4e>
 80044ce:	460c      	mov	r4, r1
 80044d0:	2001      	movs	r0, #1
 80044d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80044d6:	e7a5      	b.n	8004424 <_svfiprintf_r+0xd4>
 80044d8:	2300      	movs	r3, #0
 80044da:	f04f 0c0a 	mov.w	ip, #10
 80044de:	4619      	mov	r1, r3
 80044e0:	3401      	adds	r4, #1
 80044e2:	9305      	str	r3, [sp, #20]
 80044e4:	4620      	mov	r0, r4
 80044e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ea:	3a30      	subs	r2, #48	; 0x30
 80044ec:	2a09      	cmp	r2, #9
 80044ee:	d903      	bls.n	80044f8 <_svfiprintf_r+0x1a8>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0c5      	beq.n	8004480 <_svfiprintf_r+0x130>
 80044f4:	9105      	str	r1, [sp, #20]
 80044f6:	e7c3      	b.n	8004480 <_svfiprintf_r+0x130>
 80044f8:	4604      	mov	r4, r0
 80044fa:	2301      	movs	r3, #1
 80044fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004500:	e7f0      	b.n	80044e4 <_svfiprintf_r+0x194>
 8004502:	ab03      	add	r3, sp, #12
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	462a      	mov	r2, r5
 8004508:	4638      	mov	r0, r7
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <_svfiprintf_r+0x1fc>)
 800450c:	a904      	add	r1, sp, #16
 800450e:	f3af 8000 	nop.w
 8004512:	1c42      	adds	r2, r0, #1
 8004514:	4606      	mov	r6, r0
 8004516:	d1d6      	bne.n	80044c6 <_svfiprintf_r+0x176>
 8004518:	89ab      	ldrh	r3, [r5, #12]
 800451a:	065b      	lsls	r3, r3, #25
 800451c:	f53f af2c 	bmi.w	8004378 <_svfiprintf_r+0x28>
 8004520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004522:	b01d      	add	sp, #116	; 0x74
 8004524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004528:	ab03      	add	r3, sp, #12
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	462a      	mov	r2, r5
 800452e:	4638      	mov	r0, r7
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <_svfiprintf_r+0x1fc>)
 8004532:	a904      	add	r1, sp, #16
 8004534:	f000 f87c 	bl	8004630 <_printf_i>
 8004538:	e7eb      	b.n	8004512 <_svfiprintf_r+0x1c2>
 800453a:	bf00      	nop
 800453c:	08004bf6 	.word	0x08004bf6
 8004540:	08004bfc 	.word	0x08004bfc
 8004544:	08004c00 	.word	0x08004c00
 8004548:	00000000 	.word	0x00000000
 800454c:	08004299 	.word	0x08004299

08004550 <_printf_common>:
 8004550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	4616      	mov	r6, r2
 8004556:	4699      	mov	r9, r3
 8004558:	688a      	ldr	r2, [r1, #8]
 800455a:	690b      	ldr	r3, [r1, #16]
 800455c:	4607      	mov	r7, r0
 800455e:	4293      	cmp	r3, r2
 8004560:	bfb8      	it	lt
 8004562:	4613      	movlt	r3, r2
 8004564:	6033      	str	r3, [r6, #0]
 8004566:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800456a:	460c      	mov	r4, r1
 800456c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004570:	b10a      	cbz	r2, 8004576 <_printf_common+0x26>
 8004572:	3301      	adds	r3, #1
 8004574:	6033      	str	r3, [r6, #0]
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	0699      	lsls	r1, r3, #26
 800457a:	bf42      	ittt	mi
 800457c:	6833      	ldrmi	r3, [r6, #0]
 800457e:	3302      	addmi	r3, #2
 8004580:	6033      	strmi	r3, [r6, #0]
 8004582:	6825      	ldr	r5, [r4, #0]
 8004584:	f015 0506 	ands.w	r5, r5, #6
 8004588:	d106      	bne.n	8004598 <_printf_common+0x48>
 800458a:	f104 0a19 	add.w	sl, r4, #25
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	6832      	ldr	r2, [r6, #0]
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	42ab      	cmp	r3, r5
 8004596:	dc28      	bgt.n	80045ea <_printf_common+0x9a>
 8004598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800459c:	1e13      	subs	r3, r2, #0
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	bf18      	it	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	0692      	lsls	r2, r2, #26
 80045a6:	d42d      	bmi.n	8004604 <_printf_common+0xb4>
 80045a8:	4649      	mov	r1, r9
 80045aa:	4638      	mov	r0, r7
 80045ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045b0:	47c0      	blx	r8
 80045b2:	3001      	adds	r0, #1
 80045b4:	d020      	beq.n	80045f8 <_printf_common+0xa8>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	68e5      	ldr	r5, [r4, #12]
 80045ba:	f003 0306 	and.w	r3, r3, #6
 80045be:	2b04      	cmp	r3, #4
 80045c0:	bf18      	it	ne
 80045c2:	2500      	movne	r5, #0
 80045c4:	6832      	ldr	r2, [r6, #0]
 80045c6:	f04f 0600 	mov.w	r6, #0
 80045ca:	68a3      	ldr	r3, [r4, #8]
 80045cc:	bf08      	it	eq
 80045ce:	1aad      	subeq	r5, r5, r2
 80045d0:	6922      	ldr	r2, [r4, #16]
 80045d2:	bf08      	it	eq
 80045d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d8:	4293      	cmp	r3, r2
 80045da:	bfc4      	itt	gt
 80045dc:	1a9b      	subgt	r3, r3, r2
 80045de:	18ed      	addgt	r5, r5, r3
 80045e0:	341a      	adds	r4, #26
 80045e2:	42b5      	cmp	r5, r6
 80045e4:	d11a      	bne.n	800461c <_printf_common+0xcc>
 80045e6:	2000      	movs	r0, #0
 80045e8:	e008      	b.n	80045fc <_printf_common+0xac>
 80045ea:	2301      	movs	r3, #1
 80045ec:	4652      	mov	r2, sl
 80045ee:	4649      	mov	r1, r9
 80045f0:	4638      	mov	r0, r7
 80045f2:	47c0      	blx	r8
 80045f4:	3001      	adds	r0, #1
 80045f6:	d103      	bne.n	8004600 <_printf_common+0xb0>
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004600:	3501      	adds	r5, #1
 8004602:	e7c4      	b.n	800458e <_printf_common+0x3e>
 8004604:	2030      	movs	r0, #48	; 0x30
 8004606:	18e1      	adds	r1, r4, r3
 8004608:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004612:	4422      	add	r2, r4
 8004614:	3302      	adds	r3, #2
 8004616:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800461a:	e7c5      	b.n	80045a8 <_printf_common+0x58>
 800461c:	2301      	movs	r3, #1
 800461e:	4622      	mov	r2, r4
 8004620:	4649      	mov	r1, r9
 8004622:	4638      	mov	r0, r7
 8004624:	47c0      	blx	r8
 8004626:	3001      	adds	r0, #1
 8004628:	d0e6      	beq.n	80045f8 <_printf_common+0xa8>
 800462a:	3601      	adds	r6, #1
 800462c:	e7d9      	b.n	80045e2 <_printf_common+0x92>
	...

08004630 <_printf_i>:
 8004630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004634:	7e0f      	ldrb	r7, [r1, #24]
 8004636:	4691      	mov	r9, r2
 8004638:	2f78      	cmp	r7, #120	; 0x78
 800463a:	4680      	mov	r8, r0
 800463c:	460c      	mov	r4, r1
 800463e:	469a      	mov	sl, r3
 8004640:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004646:	d807      	bhi.n	8004658 <_printf_i+0x28>
 8004648:	2f62      	cmp	r7, #98	; 0x62
 800464a:	d80a      	bhi.n	8004662 <_printf_i+0x32>
 800464c:	2f00      	cmp	r7, #0
 800464e:	f000 80d9 	beq.w	8004804 <_printf_i+0x1d4>
 8004652:	2f58      	cmp	r7, #88	; 0x58
 8004654:	f000 80a4 	beq.w	80047a0 <_printf_i+0x170>
 8004658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800465c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004660:	e03a      	b.n	80046d8 <_printf_i+0xa8>
 8004662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004666:	2b15      	cmp	r3, #21
 8004668:	d8f6      	bhi.n	8004658 <_printf_i+0x28>
 800466a:	a101      	add	r1, pc, #4	; (adr r1, 8004670 <_printf_i+0x40>)
 800466c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004670:	080046c9 	.word	0x080046c9
 8004674:	080046dd 	.word	0x080046dd
 8004678:	08004659 	.word	0x08004659
 800467c:	08004659 	.word	0x08004659
 8004680:	08004659 	.word	0x08004659
 8004684:	08004659 	.word	0x08004659
 8004688:	080046dd 	.word	0x080046dd
 800468c:	08004659 	.word	0x08004659
 8004690:	08004659 	.word	0x08004659
 8004694:	08004659 	.word	0x08004659
 8004698:	08004659 	.word	0x08004659
 800469c:	080047eb 	.word	0x080047eb
 80046a0:	0800470d 	.word	0x0800470d
 80046a4:	080047cd 	.word	0x080047cd
 80046a8:	08004659 	.word	0x08004659
 80046ac:	08004659 	.word	0x08004659
 80046b0:	0800480d 	.word	0x0800480d
 80046b4:	08004659 	.word	0x08004659
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	08004659 	.word	0x08004659
 80046c0:	08004659 	.word	0x08004659
 80046c4:	080047d5 	.word	0x080047d5
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	1d1a      	adds	r2, r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	602a      	str	r2, [r5, #0]
 80046d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046d8:	2301      	movs	r3, #1
 80046da:	e0a4      	b.n	8004826 <_printf_i+0x1f6>
 80046dc:	6820      	ldr	r0, [r4, #0]
 80046de:	6829      	ldr	r1, [r5, #0]
 80046e0:	0606      	lsls	r6, r0, #24
 80046e2:	f101 0304 	add.w	r3, r1, #4
 80046e6:	d50a      	bpl.n	80046fe <_printf_i+0xce>
 80046e8:	680e      	ldr	r6, [r1, #0]
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	2e00      	cmp	r6, #0
 80046ee:	da03      	bge.n	80046f8 <_printf_i+0xc8>
 80046f0:	232d      	movs	r3, #45	; 0x2d
 80046f2:	4276      	negs	r6, r6
 80046f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f8:	230a      	movs	r3, #10
 80046fa:	485e      	ldr	r0, [pc, #376]	; (8004874 <_printf_i+0x244>)
 80046fc:	e019      	b.n	8004732 <_printf_i+0x102>
 80046fe:	680e      	ldr	r6, [r1, #0]
 8004700:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004704:	602b      	str	r3, [r5, #0]
 8004706:	bf18      	it	ne
 8004708:	b236      	sxthne	r6, r6
 800470a:	e7ef      	b.n	80046ec <_printf_i+0xbc>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	1d19      	adds	r1, r3, #4
 8004712:	6029      	str	r1, [r5, #0]
 8004714:	0601      	lsls	r1, r0, #24
 8004716:	d501      	bpl.n	800471c <_printf_i+0xec>
 8004718:	681e      	ldr	r6, [r3, #0]
 800471a:	e002      	b.n	8004722 <_printf_i+0xf2>
 800471c:	0646      	lsls	r6, r0, #25
 800471e:	d5fb      	bpl.n	8004718 <_printf_i+0xe8>
 8004720:	881e      	ldrh	r6, [r3, #0]
 8004722:	2f6f      	cmp	r7, #111	; 0x6f
 8004724:	bf0c      	ite	eq
 8004726:	2308      	moveq	r3, #8
 8004728:	230a      	movne	r3, #10
 800472a:	4852      	ldr	r0, [pc, #328]	; (8004874 <_printf_i+0x244>)
 800472c:	2100      	movs	r1, #0
 800472e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004732:	6865      	ldr	r5, [r4, #4]
 8004734:	2d00      	cmp	r5, #0
 8004736:	bfa8      	it	ge
 8004738:	6821      	ldrge	r1, [r4, #0]
 800473a:	60a5      	str	r5, [r4, #8]
 800473c:	bfa4      	itt	ge
 800473e:	f021 0104 	bicge.w	r1, r1, #4
 8004742:	6021      	strge	r1, [r4, #0]
 8004744:	b90e      	cbnz	r6, 800474a <_printf_i+0x11a>
 8004746:	2d00      	cmp	r5, #0
 8004748:	d04d      	beq.n	80047e6 <_printf_i+0x1b6>
 800474a:	4615      	mov	r5, r2
 800474c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004750:	fb03 6711 	mls	r7, r3, r1, r6
 8004754:	5dc7      	ldrb	r7, [r0, r7]
 8004756:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800475a:	4637      	mov	r7, r6
 800475c:	42bb      	cmp	r3, r7
 800475e:	460e      	mov	r6, r1
 8004760:	d9f4      	bls.n	800474c <_printf_i+0x11c>
 8004762:	2b08      	cmp	r3, #8
 8004764:	d10b      	bne.n	800477e <_printf_i+0x14e>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	07de      	lsls	r6, r3, #31
 800476a:	d508      	bpl.n	800477e <_printf_i+0x14e>
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	6861      	ldr	r1, [r4, #4]
 8004770:	4299      	cmp	r1, r3
 8004772:	bfde      	ittt	le
 8004774:	2330      	movle	r3, #48	; 0x30
 8004776:	f805 3c01 	strble.w	r3, [r5, #-1]
 800477a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800477e:	1b52      	subs	r2, r2, r5
 8004780:	6122      	str	r2, [r4, #16]
 8004782:	464b      	mov	r3, r9
 8004784:	4621      	mov	r1, r4
 8004786:	4640      	mov	r0, r8
 8004788:	f8cd a000 	str.w	sl, [sp]
 800478c:	aa03      	add	r2, sp, #12
 800478e:	f7ff fedf 	bl	8004550 <_printf_common>
 8004792:	3001      	adds	r0, #1
 8004794:	d14c      	bne.n	8004830 <_printf_i+0x200>
 8004796:	f04f 30ff 	mov.w	r0, #4294967295
 800479a:	b004      	add	sp, #16
 800479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a0:	4834      	ldr	r0, [pc, #208]	; (8004874 <_printf_i+0x244>)
 80047a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047a6:	6829      	ldr	r1, [r5, #0]
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80047ae:	6029      	str	r1, [r5, #0]
 80047b0:	061d      	lsls	r5, r3, #24
 80047b2:	d514      	bpl.n	80047de <_printf_i+0x1ae>
 80047b4:	07df      	lsls	r7, r3, #31
 80047b6:	bf44      	itt	mi
 80047b8:	f043 0320 	orrmi.w	r3, r3, #32
 80047bc:	6023      	strmi	r3, [r4, #0]
 80047be:	b91e      	cbnz	r6, 80047c8 <_printf_i+0x198>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	f023 0320 	bic.w	r3, r3, #32
 80047c6:	6023      	str	r3, [r4, #0]
 80047c8:	2310      	movs	r3, #16
 80047ca:	e7af      	b.n	800472c <_printf_i+0xfc>
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	f043 0320 	orr.w	r3, r3, #32
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	2378      	movs	r3, #120	; 0x78
 80047d6:	4828      	ldr	r0, [pc, #160]	; (8004878 <_printf_i+0x248>)
 80047d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047dc:	e7e3      	b.n	80047a6 <_printf_i+0x176>
 80047de:	0659      	lsls	r1, r3, #25
 80047e0:	bf48      	it	mi
 80047e2:	b2b6      	uxthmi	r6, r6
 80047e4:	e7e6      	b.n	80047b4 <_printf_i+0x184>
 80047e6:	4615      	mov	r5, r2
 80047e8:	e7bb      	b.n	8004762 <_printf_i+0x132>
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	6826      	ldr	r6, [r4, #0]
 80047ee:	1d18      	adds	r0, r3, #4
 80047f0:	6961      	ldr	r1, [r4, #20]
 80047f2:	6028      	str	r0, [r5, #0]
 80047f4:	0635      	lsls	r5, r6, #24
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	d501      	bpl.n	80047fe <_printf_i+0x1ce>
 80047fa:	6019      	str	r1, [r3, #0]
 80047fc:	e002      	b.n	8004804 <_printf_i+0x1d4>
 80047fe:	0670      	lsls	r0, r6, #25
 8004800:	d5fb      	bpl.n	80047fa <_printf_i+0x1ca>
 8004802:	8019      	strh	r1, [r3, #0]
 8004804:	2300      	movs	r3, #0
 8004806:	4615      	mov	r5, r2
 8004808:	6123      	str	r3, [r4, #16]
 800480a:	e7ba      	b.n	8004782 <_printf_i+0x152>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	2100      	movs	r1, #0
 8004810:	1d1a      	adds	r2, r3, #4
 8004812:	602a      	str	r2, [r5, #0]
 8004814:	681d      	ldr	r5, [r3, #0]
 8004816:	6862      	ldr	r2, [r4, #4]
 8004818:	4628      	mov	r0, r5
 800481a:	f000 f82f 	bl	800487c <memchr>
 800481e:	b108      	cbz	r0, 8004824 <_printf_i+0x1f4>
 8004820:	1b40      	subs	r0, r0, r5
 8004822:	6060      	str	r0, [r4, #4]
 8004824:	6863      	ldr	r3, [r4, #4]
 8004826:	6123      	str	r3, [r4, #16]
 8004828:	2300      	movs	r3, #0
 800482a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800482e:	e7a8      	b.n	8004782 <_printf_i+0x152>
 8004830:	462a      	mov	r2, r5
 8004832:	4649      	mov	r1, r9
 8004834:	4640      	mov	r0, r8
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	47d0      	blx	sl
 800483a:	3001      	adds	r0, #1
 800483c:	d0ab      	beq.n	8004796 <_printf_i+0x166>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	079b      	lsls	r3, r3, #30
 8004842:	d413      	bmi.n	800486c <_printf_i+0x23c>
 8004844:	68e0      	ldr	r0, [r4, #12]
 8004846:	9b03      	ldr	r3, [sp, #12]
 8004848:	4298      	cmp	r0, r3
 800484a:	bfb8      	it	lt
 800484c:	4618      	movlt	r0, r3
 800484e:	e7a4      	b.n	800479a <_printf_i+0x16a>
 8004850:	2301      	movs	r3, #1
 8004852:	4632      	mov	r2, r6
 8004854:	4649      	mov	r1, r9
 8004856:	4640      	mov	r0, r8
 8004858:	47d0      	blx	sl
 800485a:	3001      	adds	r0, #1
 800485c:	d09b      	beq.n	8004796 <_printf_i+0x166>
 800485e:	3501      	adds	r5, #1
 8004860:	68e3      	ldr	r3, [r4, #12]
 8004862:	9903      	ldr	r1, [sp, #12]
 8004864:	1a5b      	subs	r3, r3, r1
 8004866:	42ab      	cmp	r3, r5
 8004868:	dcf2      	bgt.n	8004850 <_printf_i+0x220>
 800486a:	e7eb      	b.n	8004844 <_printf_i+0x214>
 800486c:	2500      	movs	r5, #0
 800486e:	f104 0619 	add.w	r6, r4, #25
 8004872:	e7f5      	b.n	8004860 <_printf_i+0x230>
 8004874:	08004c07 	.word	0x08004c07
 8004878:	08004c18 	.word	0x08004c18

0800487c <memchr>:
 800487c:	4603      	mov	r3, r0
 800487e:	b510      	push	{r4, lr}
 8004880:	b2c9      	uxtb	r1, r1
 8004882:	4402      	add	r2, r0
 8004884:	4293      	cmp	r3, r2
 8004886:	4618      	mov	r0, r3
 8004888:	d101      	bne.n	800488e <memchr+0x12>
 800488a:	2000      	movs	r0, #0
 800488c:	e003      	b.n	8004896 <memchr+0x1a>
 800488e:	7804      	ldrb	r4, [r0, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	428c      	cmp	r4, r1
 8004894:	d1f6      	bne.n	8004884 <memchr+0x8>
 8004896:	bd10      	pop	{r4, pc}

08004898 <memcpy>:
 8004898:	440a      	add	r2, r1
 800489a:	4291      	cmp	r1, r2
 800489c:	f100 33ff 	add.w	r3, r0, #4294967295
 80048a0:	d100      	bne.n	80048a4 <memcpy+0xc>
 80048a2:	4770      	bx	lr
 80048a4:	b510      	push	{r4, lr}
 80048a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048aa:	4291      	cmp	r1, r2
 80048ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048b0:	d1f9      	bne.n	80048a6 <memcpy+0xe>
 80048b2:	bd10      	pop	{r4, pc}

080048b4 <memmove>:
 80048b4:	4288      	cmp	r0, r1
 80048b6:	b510      	push	{r4, lr}
 80048b8:	eb01 0402 	add.w	r4, r1, r2
 80048bc:	d902      	bls.n	80048c4 <memmove+0x10>
 80048be:	4284      	cmp	r4, r0
 80048c0:	4623      	mov	r3, r4
 80048c2:	d807      	bhi.n	80048d4 <memmove+0x20>
 80048c4:	1e43      	subs	r3, r0, #1
 80048c6:	42a1      	cmp	r1, r4
 80048c8:	d008      	beq.n	80048dc <memmove+0x28>
 80048ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048d2:	e7f8      	b.n	80048c6 <memmove+0x12>
 80048d4:	4601      	mov	r1, r0
 80048d6:	4402      	add	r2, r0
 80048d8:	428a      	cmp	r2, r1
 80048da:	d100      	bne.n	80048de <memmove+0x2a>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048e6:	e7f7      	b.n	80048d8 <memmove+0x24>

080048e8 <_free_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4605      	mov	r5, r0
 80048ec:	2900      	cmp	r1, #0
 80048ee:	d040      	beq.n	8004972 <_free_r+0x8a>
 80048f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f4:	1f0c      	subs	r4, r1, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bfb8      	it	lt
 80048fa:	18e4      	addlt	r4, r4, r3
 80048fc:	f000 f910 	bl	8004b20 <__malloc_lock>
 8004900:	4a1c      	ldr	r2, [pc, #112]	; (8004974 <_free_r+0x8c>)
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	b933      	cbnz	r3, 8004914 <_free_r+0x2c>
 8004906:	6063      	str	r3, [r4, #4]
 8004908:	6014      	str	r4, [r2, #0]
 800490a:	4628      	mov	r0, r5
 800490c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004910:	f000 b90c 	b.w	8004b2c <__malloc_unlock>
 8004914:	42a3      	cmp	r3, r4
 8004916:	d908      	bls.n	800492a <_free_r+0x42>
 8004918:	6820      	ldr	r0, [r4, #0]
 800491a:	1821      	adds	r1, r4, r0
 800491c:	428b      	cmp	r3, r1
 800491e:	bf01      	itttt	eq
 8004920:	6819      	ldreq	r1, [r3, #0]
 8004922:	685b      	ldreq	r3, [r3, #4]
 8004924:	1809      	addeq	r1, r1, r0
 8004926:	6021      	streq	r1, [r4, #0]
 8004928:	e7ed      	b.n	8004906 <_free_r+0x1e>
 800492a:	461a      	mov	r2, r3
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	b10b      	cbz	r3, 8004934 <_free_r+0x4c>
 8004930:	42a3      	cmp	r3, r4
 8004932:	d9fa      	bls.n	800492a <_free_r+0x42>
 8004934:	6811      	ldr	r1, [r2, #0]
 8004936:	1850      	adds	r0, r2, r1
 8004938:	42a0      	cmp	r0, r4
 800493a:	d10b      	bne.n	8004954 <_free_r+0x6c>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	4401      	add	r1, r0
 8004940:	1850      	adds	r0, r2, r1
 8004942:	4283      	cmp	r3, r0
 8004944:	6011      	str	r1, [r2, #0]
 8004946:	d1e0      	bne.n	800490a <_free_r+0x22>
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	4401      	add	r1, r0
 800494e:	6011      	str	r1, [r2, #0]
 8004950:	6053      	str	r3, [r2, #4]
 8004952:	e7da      	b.n	800490a <_free_r+0x22>
 8004954:	d902      	bls.n	800495c <_free_r+0x74>
 8004956:	230c      	movs	r3, #12
 8004958:	602b      	str	r3, [r5, #0]
 800495a:	e7d6      	b.n	800490a <_free_r+0x22>
 800495c:	6820      	ldr	r0, [r4, #0]
 800495e:	1821      	adds	r1, r4, r0
 8004960:	428b      	cmp	r3, r1
 8004962:	bf01      	itttt	eq
 8004964:	6819      	ldreq	r1, [r3, #0]
 8004966:	685b      	ldreq	r3, [r3, #4]
 8004968:	1809      	addeq	r1, r1, r0
 800496a:	6021      	streq	r1, [r4, #0]
 800496c:	6063      	str	r3, [r4, #4]
 800496e:	6054      	str	r4, [r2, #4]
 8004970:	e7cb      	b.n	800490a <_free_r+0x22>
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	200001cc 	.word	0x200001cc

08004978 <sbrk_aligned>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4e0e      	ldr	r6, [pc, #56]	; (80049b4 <sbrk_aligned+0x3c>)
 800497c:	460c      	mov	r4, r1
 800497e:	6831      	ldr	r1, [r6, #0]
 8004980:	4605      	mov	r5, r0
 8004982:	b911      	cbnz	r1, 800498a <sbrk_aligned+0x12>
 8004984:	f000 f8bc 	bl	8004b00 <_sbrk_r>
 8004988:	6030      	str	r0, [r6, #0]
 800498a:	4621      	mov	r1, r4
 800498c:	4628      	mov	r0, r5
 800498e:	f000 f8b7 	bl	8004b00 <_sbrk_r>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	d00a      	beq.n	80049ac <sbrk_aligned+0x34>
 8004996:	1cc4      	adds	r4, r0, #3
 8004998:	f024 0403 	bic.w	r4, r4, #3
 800499c:	42a0      	cmp	r0, r4
 800499e:	d007      	beq.n	80049b0 <sbrk_aligned+0x38>
 80049a0:	1a21      	subs	r1, r4, r0
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 f8ac 	bl	8004b00 <_sbrk_r>
 80049a8:	3001      	adds	r0, #1
 80049aa:	d101      	bne.n	80049b0 <sbrk_aligned+0x38>
 80049ac:	f04f 34ff 	mov.w	r4, #4294967295
 80049b0:	4620      	mov	r0, r4
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	200001d0 	.word	0x200001d0

080049b8 <_malloc_r>:
 80049b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049bc:	1ccd      	adds	r5, r1, #3
 80049be:	f025 0503 	bic.w	r5, r5, #3
 80049c2:	3508      	adds	r5, #8
 80049c4:	2d0c      	cmp	r5, #12
 80049c6:	bf38      	it	cc
 80049c8:	250c      	movcc	r5, #12
 80049ca:	2d00      	cmp	r5, #0
 80049cc:	4607      	mov	r7, r0
 80049ce:	db01      	blt.n	80049d4 <_malloc_r+0x1c>
 80049d0:	42a9      	cmp	r1, r5
 80049d2:	d905      	bls.n	80049e0 <_malloc_r+0x28>
 80049d4:	230c      	movs	r3, #12
 80049d6:	2600      	movs	r6, #0
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	4630      	mov	r0, r6
 80049dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e0:	4e2e      	ldr	r6, [pc, #184]	; (8004a9c <_malloc_r+0xe4>)
 80049e2:	f000 f89d 	bl	8004b20 <__malloc_lock>
 80049e6:	6833      	ldr	r3, [r6, #0]
 80049e8:	461c      	mov	r4, r3
 80049ea:	bb34      	cbnz	r4, 8004a3a <_malloc_r+0x82>
 80049ec:	4629      	mov	r1, r5
 80049ee:	4638      	mov	r0, r7
 80049f0:	f7ff ffc2 	bl	8004978 <sbrk_aligned>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	4604      	mov	r4, r0
 80049f8:	d14d      	bne.n	8004a96 <_malloc_r+0xde>
 80049fa:	6834      	ldr	r4, [r6, #0]
 80049fc:	4626      	mov	r6, r4
 80049fe:	2e00      	cmp	r6, #0
 8004a00:	d140      	bne.n	8004a84 <_malloc_r+0xcc>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	4631      	mov	r1, r6
 8004a06:	4638      	mov	r0, r7
 8004a08:	eb04 0803 	add.w	r8, r4, r3
 8004a0c:	f000 f878 	bl	8004b00 <_sbrk_r>
 8004a10:	4580      	cmp	r8, r0
 8004a12:	d13a      	bne.n	8004a8a <_malloc_r+0xd2>
 8004a14:	6821      	ldr	r1, [r4, #0]
 8004a16:	3503      	adds	r5, #3
 8004a18:	1a6d      	subs	r5, r5, r1
 8004a1a:	f025 0503 	bic.w	r5, r5, #3
 8004a1e:	3508      	adds	r5, #8
 8004a20:	2d0c      	cmp	r5, #12
 8004a22:	bf38      	it	cc
 8004a24:	250c      	movcc	r5, #12
 8004a26:	4638      	mov	r0, r7
 8004a28:	4629      	mov	r1, r5
 8004a2a:	f7ff ffa5 	bl	8004978 <sbrk_aligned>
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d02b      	beq.n	8004a8a <_malloc_r+0xd2>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	442b      	add	r3, r5
 8004a36:	6023      	str	r3, [r4, #0]
 8004a38:	e00e      	b.n	8004a58 <_malloc_r+0xa0>
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	1b52      	subs	r2, r2, r5
 8004a3e:	d41e      	bmi.n	8004a7e <_malloc_r+0xc6>
 8004a40:	2a0b      	cmp	r2, #11
 8004a42:	d916      	bls.n	8004a72 <_malloc_r+0xba>
 8004a44:	1961      	adds	r1, r4, r5
 8004a46:	42a3      	cmp	r3, r4
 8004a48:	6025      	str	r5, [r4, #0]
 8004a4a:	bf18      	it	ne
 8004a4c:	6059      	strne	r1, [r3, #4]
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	bf08      	it	eq
 8004a52:	6031      	streq	r1, [r6, #0]
 8004a54:	5162      	str	r2, [r4, r5]
 8004a56:	604b      	str	r3, [r1, #4]
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f104 060b 	add.w	r6, r4, #11
 8004a5e:	f000 f865 	bl	8004b2c <__malloc_unlock>
 8004a62:	f026 0607 	bic.w	r6, r6, #7
 8004a66:	1d23      	adds	r3, r4, #4
 8004a68:	1af2      	subs	r2, r6, r3
 8004a6a:	d0b6      	beq.n	80049da <_malloc_r+0x22>
 8004a6c:	1b9b      	subs	r3, r3, r6
 8004a6e:	50a3      	str	r3, [r4, r2]
 8004a70:	e7b3      	b.n	80049da <_malloc_r+0x22>
 8004a72:	6862      	ldr	r2, [r4, #4]
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	bf0c      	ite	eq
 8004a78:	6032      	streq	r2, [r6, #0]
 8004a7a:	605a      	strne	r2, [r3, #4]
 8004a7c:	e7ec      	b.n	8004a58 <_malloc_r+0xa0>
 8004a7e:	4623      	mov	r3, r4
 8004a80:	6864      	ldr	r4, [r4, #4]
 8004a82:	e7b2      	b.n	80049ea <_malloc_r+0x32>
 8004a84:	4634      	mov	r4, r6
 8004a86:	6876      	ldr	r6, [r6, #4]
 8004a88:	e7b9      	b.n	80049fe <_malloc_r+0x46>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	f000 f84c 	bl	8004b2c <__malloc_unlock>
 8004a94:	e7a1      	b.n	80049da <_malloc_r+0x22>
 8004a96:	6025      	str	r5, [r4, #0]
 8004a98:	e7de      	b.n	8004a58 <_malloc_r+0xa0>
 8004a9a:	bf00      	nop
 8004a9c:	200001cc 	.word	0x200001cc

08004aa0 <_realloc_r>:
 8004aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	4614      	mov	r4, r2
 8004aa8:	460e      	mov	r6, r1
 8004aaa:	b921      	cbnz	r1, 8004ab6 <_realloc_r+0x16>
 8004aac:	4611      	mov	r1, r2
 8004aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab2:	f7ff bf81 	b.w	80049b8 <_malloc_r>
 8004ab6:	b92a      	cbnz	r2, 8004ac4 <_realloc_r+0x24>
 8004ab8:	f7ff ff16 	bl	80048e8 <_free_r>
 8004abc:	4625      	mov	r5, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ac4:	f000 f838 	bl	8004b38 <_malloc_usable_size_r>
 8004ac8:	4284      	cmp	r4, r0
 8004aca:	4607      	mov	r7, r0
 8004acc:	d802      	bhi.n	8004ad4 <_realloc_r+0x34>
 8004ace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ad2:	d812      	bhi.n	8004afa <_realloc_r+0x5a>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	f7ff ff6e 	bl	80049b8 <_malloc_r>
 8004adc:	4605      	mov	r5, r0
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d0ed      	beq.n	8004abe <_realloc_r+0x1e>
 8004ae2:	42bc      	cmp	r4, r7
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	bf28      	it	cs
 8004aea:	463a      	movcs	r2, r7
 8004aec:	f7ff fed4 	bl	8004898 <memcpy>
 8004af0:	4631      	mov	r1, r6
 8004af2:	4640      	mov	r0, r8
 8004af4:	f7ff fef8 	bl	80048e8 <_free_r>
 8004af8:	e7e1      	b.n	8004abe <_realloc_r+0x1e>
 8004afa:	4635      	mov	r5, r6
 8004afc:	e7df      	b.n	8004abe <_realloc_r+0x1e>
	...

08004b00 <_sbrk_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	2300      	movs	r3, #0
 8004b04:	4d05      	ldr	r5, [pc, #20]	; (8004b1c <_sbrk_r+0x1c>)
 8004b06:	4604      	mov	r4, r0
 8004b08:	4608      	mov	r0, r1
 8004b0a:	602b      	str	r3, [r5, #0]
 8004b0c:	f7fc fa14 	bl	8000f38 <_sbrk>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	d102      	bne.n	8004b1a <_sbrk_r+0x1a>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	b103      	cbz	r3, 8004b1a <_sbrk_r+0x1a>
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	200001d4 	.word	0x200001d4

08004b20 <__malloc_lock>:
 8004b20:	4801      	ldr	r0, [pc, #4]	; (8004b28 <__malloc_lock+0x8>)
 8004b22:	f000 b811 	b.w	8004b48 <__retarget_lock_acquire_recursive>
 8004b26:	bf00      	nop
 8004b28:	200001d8 	.word	0x200001d8

08004b2c <__malloc_unlock>:
 8004b2c:	4801      	ldr	r0, [pc, #4]	; (8004b34 <__malloc_unlock+0x8>)
 8004b2e:	f000 b80c 	b.w	8004b4a <__retarget_lock_release_recursive>
 8004b32:	bf00      	nop
 8004b34:	200001d8 	.word	0x200001d8

08004b38 <_malloc_usable_size_r>:
 8004b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b3c:	1f18      	subs	r0, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bfbc      	itt	lt
 8004b42:	580b      	ldrlt	r3, [r1, r0]
 8004b44:	18c0      	addlt	r0, r0, r3
 8004b46:	4770      	bx	lr

08004b48 <__retarget_lock_acquire_recursive>:
 8004b48:	4770      	bx	lr

08004b4a <__retarget_lock_release_recursive>:
 8004b4a:	4770      	bx	lr

08004b4c <_init>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr

08004b58 <_fini>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr
